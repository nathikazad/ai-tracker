schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "event_tag"
"""
type event_tag {
  """An object relationship"""
  event: events!
  event_id: Int!
  tag_name: String!
}

"""
aggregated selection of "event_tag"
"""
type event_tag_aggregate {
  aggregate: event_tag_aggregate_fields
  nodes: [event_tag!]!
}

input event_tag_aggregate_bool_exp {
  count: event_tag_aggregate_bool_exp_count
}

input event_tag_aggregate_bool_exp_count {
  arguments: [event_tag_select_column!]
  distinct: Boolean
  filter: event_tag_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "event_tag"
"""
type event_tag_aggregate_fields {
  avg: event_tag_avg_fields
  count(columns: [event_tag_select_column!], distinct: Boolean): Int!
  max: event_tag_max_fields
  min: event_tag_min_fields
  stddev: event_tag_stddev_fields
  stddev_pop: event_tag_stddev_pop_fields
  stddev_samp: event_tag_stddev_samp_fields
  sum: event_tag_sum_fields
  var_pop: event_tag_var_pop_fields
  var_samp: event_tag_var_samp_fields
  variance: event_tag_variance_fields
}

"""
order by aggregate values of table "event_tag"
"""
input event_tag_aggregate_order_by {
  avg: event_tag_avg_order_by
  count: order_by
  max: event_tag_max_order_by
  min: event_tag_min_order_by
  stddev: event_tag_stddev_order_by
  stddev_pop: event_tag_stddev_pop_order_by
  stddev_samp: event_tag_stddev_samp_order_by
  sum: event_tag_sum_order_by
  var_pop: event_tag_var_pop_order_by
  var_samp: event_tag_var_samp_order_by
  variance: event_tag_variance_order_by
}

"""
input type for inserting array relation for remote table "event_tag"
"""
input event_tag_arr_rel_insert_input {
  data: [event_tag_insert_input!]!

  """upsert condition"""
  on_conflict: event_tag_on_conflict
}

"""aggregate avg on columns"""
type event_tag_avg_fields {
  event_id: Float
}

"""
order by avg() on columns of table "event_tag"
"""
input event_tag_avg_order_by {
  event_id: order_by
}

"""
Boolean expression to filter rows from the table "event_tag". All fields are combined with a logical 'AND'.
"""
input event_tag_bool_exp {
  _and: [event_tag_bool_exp!]
  _not: event_tag_bool_exp
  _or: [event_tag_bool_exp!]
  event: events_bool_exp
  event_id: Int_comparison_exp
  tag_name: String_comparison_exp
}

"""
unique or primary key constraints on table "event_tag"
"""
enum event_tag_constraint {
  """
  unique or primary key constraint on columns "tag_name", "event_id"
  """
  event_tag_pkey
}

"""
input type for incrementing numeric columns in table "event_tag"
"""
input event_tag_inc_input {
  event_id: Int
}

"""
input type for inserting data into table "event_tag"
"""
input event_tag_insert_input {
  event: events_obj_rel_insert_input
  event_id: Int
  tag_name: String
}

"""aggregate max on columns"""
type event_tag_max_fields {
  event_id: Int
  tag_name: String
}

"""
order by max() on columns of table "event_tag"
"""
input event_tag_max_order_by {
  event_id: order_by
  tag_name: order_by
}

"""aggregate min on columns"""
type event_tag_min_fields {
  event_id: Int
  tag_name: String
}

"""
order by min() on columns of table "event_tag"
"""
input event_tag_min_order_by {
  event_id: order_by
  tag_name: order_by
}

"""
response of any mutation on the table "event_tag"
"""
type event_tag_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [event_tag!]!
}

"""
on_conflict condition type for table "event_tag"
"""
input event_tag_on_conflict {
  constraint: event_tag_constraint!
  update_columns: [event_tag_update_column!]! = []
  where: event_tag_bool_exp
}

"""Ordering options when selecting data from "event_tag"."""
input event_tag_order_by {
  event: events_order_by
  event_id: order_by
  tag_name: order_by
}

"""primary key columns input for table: event_tag"""
input event_tag_pk_columns_input {
  event_id: Int!
  tag_name: String!
}

"""
select columns of table "event_tag"
"""
enum event_tag_select_column {
  """column name"""
  event_id

  """column name"""
  tag_name
}

"""
input type for updating data in table "event_tag"
"""
input event_tag_set_input {
  event_id: Int
  tag_name: String
}

"""aggregate stddev on columns"""
type event_tag_stddev_fields {
  event_id: Float
}

"""
order by stddev() on columns of table "event_tag"
"""
input event_tag_stddev_order_by {
  event_id: order_by
}

"""aggregate stddev_pop on columns"""
type event_tag_stddev_pop_fields {
  event_id: Float
}

"""
order by stddev_pop() on columns of table "event_tag"
"""
input event_tag_stddev_pop_order_by {
  event_id: order_by
}

"""aggregate stddev_samp on columns"""
type event_tag_stddev_samp_fields {
  event_id: Float
}

"""
order by stddev_samp() on columns of table "event_tag"
"""
input event_tag_stddev_samp_order_by {
  event_id: order_by
}

"""
Streaming cursor of the table "event_tag"
"""
input event_tag_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: event_tag_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input event_tag_stream_cursor_value_input {
  event_id: Int
  tag_name: String
}

"""aggregate sum on columns"""
type event_tag_sum_fields {
  event_id: Int
}

"""
order by sum() on columns of table "event_tag"
"""
input event_tag_sum_order_by {
  event_id: order_by
}

"""
update columns of table "event_tag"
"""
enum event_tag_update_column {
  """column name"""
  event_id

  """column name"""
  tag_name
}

input event_tag_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: event_tag_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: event_tag_set_input

  """filter the rows which have to be updated"""
  where: event_tag_bool_exp!
}

"""aggregate var_pop on columns"""
type event_tag_var_pop_fields {
  event_id: Float
}

"""
order by var_pop() on columns of table "event_tag"
"""
input event_tag_var_pop_order_by {
  event_id: order_by
}

"""aggregate var_samp on columns"""
type event_tag_var_samp_fields {
  event_id: Float
}

"""
order by var_samp() on columns of table "event_tag"
"""
input event_tag_var_samp_order_by {
  event_id: order_by
}

"""aggregate variance on columns"""
type event_tag_variance_fields {
  event_id: Float
}

"""
order by variance() on columns of table "event_tag"
"""
input event_tag_variance_order_by {
  event_id: order_by
}

"""
columns and relationships of "event_types"
"""
type event_types {
  """An array relationship"""
  children(
    """distinct select on columns"""
    distinct_on: [event_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_types_order_by!]

    """filter the rows returned"""
    where: event_types_bool_exp
  ): [event_types!]!

  """An aggregate relationship"""
  children_aggregate(
    """distinct select on columns"""
    distinct_on: [event_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_types_order_by!]

    """filter the rows returned"""
    where: event_types_bool_exp
  ): event_types_aggregate!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  name: String!
  parent: String

  """
  A computed field, executes function "get_event_type_path"
  """
  parent_tree: String
}

"""
aggregated selection of "event_types"
"""
type event_types_aggregate {
  aggregate: event_types_aggregate_fields
  nodes: [event_types!]!
}

input event_types_aggregate_bool_exp {
  count: event_types_aggregate_bool_exp_count
}

input event_types_aggregate_bool_exp_count {
  arguments: [event_types_select_column!]
  distinct: Boolean
  filter: event_types_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "event_types"
"""
type event_types_aggregate_fields {
  count(columns: [event_types_select_column!], distinct: Boolean): Int!
  max: event_types_max_fields
  min: event_types_min_fields
}

"""
order by aggregate values of table "event_types"
"""
input event_types_aggregate_order_by {
  count: order_by
  max: event_types_max_order_by
  min: event_types_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input event_types_append_input {
  metadata: jsonb
}

"""
input type for inserting array relation for remote table "event_types"
"""
input event_types_arr_rel_insert_input {
  data: [event_types_insert_input!]!

  """upsert condition"""
  on_conflict: event_types_on_conflict
}

"""
Boolean expression to filter rows from the table "event_types". All fields are combined with a logical 'AND'.
"""
input event_types_bool_exp {
  _and: [event_types_bool_exp!]
  _not: event_types_bool_exp
  _or: [event_types_bool_exp!]
  children: event_types_bool_exp
  children_aggregate: event_types_aggregate_bool_exp
  metadata: jsonb_comparison_exp
  name: String_comparison_exp
  parent: String_comparison_exp
  parent_tree: String_comparison_exp
}

"""
unique or primary key constraints on table "event_types"
"""
enum event_types_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  tags_name_key

  """
  unique or primary key constraint on columns "name"
  """
  tags_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input event_types_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input event_types_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input event_types_delete_key_input {
  metadata: String
}

"""
input type for inserting data into table "event_types"
"""
input event_types_insert_input {
  children: event_types_arr_rel_insert_input
  metadata: jsonb
  name: String
  parent: String
}

"""aggregate max on columns"""
type event_types_max_fields {
  name: String
  parent: String

  """
  A computed field, executes function "get_event_type_path"
  """
  parent_tree: String
}

"""
order by max() on columns of table "event_types"
"""
input event_types_max_order_by {
  name: order_by
  parent: order_by
}

"""aggregate min on columns"""
type event_types_min_fields {
  name: String
  parent: String

  """
  A computed field, executes function "get_event_type_path"
  """
  parent_tree: String
}

"""
order by min() on columns of table "event_types"
"""
input event_types_min_order_by {
  name: order_by
  parent: order_by
}

"""
response of any mutation on the table "event_types"
"""
type event_types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [event_types!]!
}

"""
input type for inserting object relation for remote table "event_types"
"""
input event_types_obj_rel_insert_input {
  data: event_types_insert_input!

  """upsert condition"""
  on_conflict: event_types_on_conflict
}

"""
on_conflict condition type for table "event_types"
"""
input event_types_on_conflict {
  constraint: event_types_constraint!
  update_columns: [event_types_update_column!]! = []
  where: event_types_bool_exp
}

"""Ordering options when selecting data from "event_types"."""
input event_types_order_by {
  children_aggregate: event_types_aggregate_order_by
  metadata: order_by
  name: order_by
  parent: order_by
  parent_tree: order_by
}

"""primary key columns input for table: event_types"""
input event_types_pk_columns_input {
  name: String!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input event_types_prepend_input {
  metadata: jsonb
}

"""
select columns of table "event_types"
"""
enum event_types_select_column {
  """column name"""
  metadata

  """column name"""
  name

  """column name"""
  parent
}

"""
input type for updating data in table "event_types"
"""
input event_types_set_input {
  metadata: jsonb
  name: String
  parent: String
}

"""
Streaming cursor of the table "event_types"
"""
input event_types_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: event_types_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input event_types_stream_cursor_value_input {
  metadata: jsonb
  name: String
  parent: String
}

"""
update columns of table "event_types"
"""
enum event_types_update_column {
  """column name"""
  metadata

  """column name"""
  name

  """column name"""
  parent
}

input event_types_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: event_types_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: event_types_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _delete_elem: event_types_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: event_types_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: event_types_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: event_types_set_input

  """filter the rows which have to be updated"""
  where: event_types_bool_exp!
}

"""
columns and relationships of "events"
"""
type events {
  """An array relationship"""
  children(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!

  """An aggregate relationship"""
  children_aggregate(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): events_aggregate!

  """cents"""
  cost_money: Int

  """seconds"""
  cost_time: Int

  """An array relationship"""
  event_tags(
    """distinct select on columns"""
    distinct_on: [event_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_tag_order_by!]

    """filter the rows returned"""
    where: event_tag_bool_exp
  ): [event_tag!]!

  """An aggregate relationship"""
  event_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [event_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_tag_order_by!]

    """filter the rows returned"""
    where: event_tag_bool_exp
  ): event_tag_aggregate!
  event_type: String!

  """An object relationship"""
  event_type_object: event_types!
  goal_id: Int
  id: Int!

  """An object relationship"""
  interaction: interactions
  interaction_id: Int
  logs(
    """JSON select path"""
    path: String
  ): jsonb
  metadata(
    """JSON select path"""
    path: String
  ): jsonb

  """An object relationship"""
  parent: events
  parent_id: Int
  status: String
  time: timestamp

  """An object relationship"""
  user: user!
  user_id: Int!
}

"""
aggregated selection of "events"
"""
type events_aggregate {
  aggregate: events_aggregate_fields
  nodes: [events!]!
}

input events_aggregate_bool_exp {
  count: events_aggregate_bool_exp_count
}

input events_aggregate_bool_exp_count {
  arguments: [events_select_column!]
  distinct: Boolean
  filter: events_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "events"
"""
type events_aggregate_fields {
  avg: events_avg_fields
  count(columns: [events_select_column!], distinct: Boolean): Int!
  max: events_max_fields
  min: events_min_fields
  stddev: events_stddev_fields
  stddev_pop: events_stddev_pop_fields
  stddev_samp: events_stddev_samp_fields
  sum: events_sum_fields
  var_pop: events_var_pop_fields
  var_samp: events_var_samp_fields
  variance: events_variance_fields
}

"""
order by aggregate values of table "events"
"""
input events_aggregate_order_by {
  avg: events_avg_order_by
  count: order_by
  max: events_max_order_by
  min: events_min_order_by
  stddev: events_stddev_order_by
  stddev_pop: events_stddev_pop_order_by
  stddev_samp: events_stddev_samp_order_by
  sum: events_sum_order_by
  var_pop: events_var_pop_order_by
  var_samp: events_var_samp_order_by
  variance: events_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input events_append_input {
  logs: jsonb
  metadata: jsonb
}

"""
input type for inserting array relation for remote table "events"
"""
input events_arr_rel_insert_input {
  data: [events_insert_input!]!

  """upsert condition"""
  on_conflict: events_on_conflict
}

"""aggregate avg on columns"""
type events_avg_fields {
  """cents"""
  cost_money: Float

  """seconds"""
  cost_time: Float
  goal_id: Float
  id: Float
  interaction_id: Float
  parent_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "events"
"""
input events_avg_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  goal_id: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "events". All fields are combined with a logical 'AND'.
"""
input events_bool_exp {
  _and: [events_bool_exp!]
  _not: events_bool_exp
  _or: [events_bool_exp!]
  children: events_bool_exp
  children_aggregate: events_aggregate_bool_exp
  cost_money: Int_comparison_exp
  cost_time: Int_comparison_exp
  event_tags: event_tag_bool_exp
  event_tags_aggregate: event_tag_aggregate_bool_exp
  event_type: String_comparison_exp
  event_type_object: event_types_bool_exp
  goal_id: Int_comparison_exp
  id: Int_comparison_exp
  interaction: interactions_bool_exp
  interaction_id: Int_comparison_exp
  logs: jsonb_comparison_exp
  metadata: jsonb_comparison_exp
  parent: events_bool_exp
  parent_id: Int_comparison_exp
  status: String_comparison_exp
  time: timestamp_comparison_exp
  user: user_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "events"
"""
enum events_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  events_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input events_delete_at_path_input {
  logs: [String!]
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input events_delete_elem_input {
  logs: Int
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input events_delete_key_input {
  logs: String
  metadata: String
}

"""
input type for incrementing numeric columns in table "events"
"""
input events_inc_input {
  """cents"""
  cost_money: Int

  """seconds"""
  cost_time: Int
  goal_id: Int
  id: Int
  interaction_id: Int
  parent_id: Int
  user_id: Int
}

"""
input type for inserting data into table "events"
"""
input events_insert_input {
  children: events_arr_rel_insert_input

  """cents"""
  cost_money: Int

  """seconds"""
  cost_time: Int
  event_tags: event_tag_arr_rel_insert_input
  event_type: String
  event_type_object: event_types_obj_rel_insert_input
  goal_id: Int
  id: Int
  interaction: interactions_obj_rel_insert_input
  interaction_id: Int
  logs: jsonb
  metadata: jsonb
  parent: events_obj_rel_insert_input
  parent_id: Int
  status: String
  time: timestamp
  user: user_obj_rel_insert_input
  user_id: Int
}

"""aggregate max on columns"""
type events_max_fields {
  """cents"""
  cost_money: Int

  """seconds"""
  cost_time: Int
  event_type: String
  goal_id: Int
  id: Int
  interaction_id: Int
  parent_id: Int
  status: String
  time: timestamp
  user_id: Int
}

"""
order by max() on columns of table "events"
"""
input events_max_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  event_type: order_by
  goal_id: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  status: order_by
  time: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type events_min_fields {
  """cents"""
  cost_money: Int

  """seconds"""
  cost_time: Int
  event_type: String
  goal_id: Int
  id: Int
  interaction_id: Int
  parent_id: Int
  status: String
  time: timestamp
  user_id: Int
}

"""
order by min() on columns of table "events"
"""
input events_min_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  event_type: order_by
  goal_id: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  status: order_by
  time: order_by
  user_id: order_by
}

"""
response of any mutation on the table "events"
"""
type events_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [events!]!
}

"""
input type for inserting object relation for remote table "events"
"""
input events_obj_rel_insert_input {
  data: events_insert_input!

  """upsert condition"""
  on_conflict: events_on_conflict
}

"""
on_conflict condition type for table "events"
"""
input events_on_conflict {
  constraint: events_constraint!
  update_columns: [events_update_column!]! = []
  where: events_bool_exp
}

"""Ordering options when selecting data from "events"."""
input events_order_by {
  children_aggregate: events_aggregate_order_by
  cost_money: order_by
  cost_time: order_by
  event_tags_aggregate: event_tag_aggregate_order_by
  event_type: order_by
  event_type_object: event_types_order_by
  goal_id: order_by
  id: order_by
  interaction: interactions_order_by
  interaction_id: order_by
  logs: order_by
  metadata: order_by
  parent: events_order_by
  parent_id: order_by
  status: order_by
  time: order_by
  user: user_order_by
  user_id: order_by
}

"""primary key columns input for table: events"""
input events_pk_columns_input {
  id: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input events_prepend_input {
  logs: jsonb
  metadata: jsonb
}

"""
select columns of table "events"
"""
enum events_select_column {
  """column name"""
  cost_money

  """column name"""
  cost_time

  """column name"""
  event_type

  """column name"""
  goal_id

  """column name"""
  id

  """column name"""
  interaction_id

  """column name"""
  logs

  """column name"""
  metadata

  """column name"""
  parent_id

  """column name"""
  status

  """column name"""
  time

  """column name"""
  user_id
}

"""
input type for updating data in table "events"
"""
input events_set_input {
  """cents"""
  cost_money: Int

  """seconds"""
  cost_time: Int
  event_type: String
  goal_id: Int
  id: Int
  interaction_id: Int
  logs: jsonb
  metadata: jsonb
  parent_id: Int
  status: String
  time: timestamp
  user_id: Int
}

"""aggregate stddev on columns"""
type events_stddev_fields {
  """cents"""
  cost_money: Float

  """seconds"""
  cost_time: Float
  goal_id: Float
  id: Float
  interaction_id: Float
  parent_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "events"
"""
input events_stddev_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  goal_id: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type events_stddev_pop_fields {
  """cents"""
  cost_money: Float

  """seconds"""
  cost_time: Float
  goal_id: Float
  id: Float
  interaction_id: Float
  parent_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "events"
"""
input events_stddev_pop_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  goal_id: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type events_stddev_samp_fields {
  """cents"""
  cost_money: Float

  """seconds"""
  cost_time: Float
  goal_id: Float
  id: Float
  interaction_id: Float
  parent_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "events"
"""
input events_stddev_samp_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  goal_id: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "events"
"""
input events_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: events_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input events_stream_cursor_value_input {
  """cents"""
  cost_money: Int

  """seconds"""
  cost_time: Int
  event_type: String
  goal_id: Int
  id: Int
  interaction_id: Int
  logs: jsonb
  metadata: jsonb
  parent_id: Int
  status: String
  time: timestamp
  user_id: Int
}

"""aggregate sum on columns"""
type events_sum_fields {
  """cents"""
  cost_money: Int

  """seconds"""
  cost_time: Int
  goal_id: Int
  id: Int
  interaction_id: Int
  parent_id: Int
  user_id: Int
}

"""
order by sum() on columns of table "events"
"""
input events_sum_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  goal_id: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  user_id: order_by
}

"""
update columns of table "events"
"""
enum events_update_column {
  """column name"""
  cost_money

  """column name"""
  cost_time

  """column name"""
  event_type

  """column name"""
  goal_id

  """column name"""
  id

  """column name"""
  interaction_id

  """column name"""
  logs

  """column name"""
  metadata

  """column name"""
  parent_id

  """column name"""
  status

  """column name"""
  time

  """column name"""
  user_id
}

input events_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: events_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: events_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _delete_elem: events_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: events_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: events_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: events_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: events_set_input

  """filter the rows which have to be updated"""
  where: events_bool_exp!
}

"""aggregate var_pop on columns"""
type events_var_pop_fields {
  """cents"""
  cost_money: Float

  """seconds"""
  cost_time: Float
  goal_id: Float
  id: Float
  interaction_id: Float
  parent_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "events"
"""
input events_var_pop_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  goal_id: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type events_var_samp_fields {
  """cents"""
  cost_money: Float

  """seconds"""
  cost_time: Float
  goal_id: Float
  id: Float
  interaction_id: Float
  parent_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "events"
"""
input events_var_samp_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  goal_id: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type events_variance_fields {
  """cents"""
  cost_money: Float

  """seconds"""
  cost_time: Float
  goal_id: Float
  id: Float
  interaction_id: Float
  parent_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "events"
"""
input events_variance_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  goal_id: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  user_id: order_by
}

scalar float8

"""
columns and relationships of "goal"
"""
type goal {
  created: timestamptz!
  id: Int!
  last_todo_mutated: timestamptz
  name: String!
  nl_description: String!
  period: Int!
  status: String!
  target_number: Int

  """An array relationship"""
  todos(
    """distinct select on columns"""
    distinct_on: [todo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todo_order_by!]

    """filter the rows returned"""
    where: todo_bool_exp
  ): [todo!]!

  """An aggregate relationship"""
  todos_aggregate(
    """distinct select on columns"""
    distinct_on: [todo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todo_order_by!]

    """filter the rows returned"""
    where: todo_bool_exp
  ): todo_aggregate!

  """An object relationship"""
  user: user!
  user_id: Int!
}

"""
aggregated selection of "goal"
"""
type goal_aggregate {
  aggregate: goal_aggregate_fields
  nodes: [goal!]!
}

"""
aggregate fields of "goal"
"""
type goal_aggregate_fields {
  avg: goal_avg_fields
  count(columns: [goal_select_column!], distinct: Boolean): Int!
  max: goal_max_fields
  min: goal_min_fields
  stddev: goal_stddev_fields
  stddev_pop: goal_stddev_pop_fields
  stddev_samp: goal_stddev_samp_fields
  sum: goal_sum_fields
  var_pop: goal_var_pop_fields
  var_samp: goal_var_samp_fields
  variance: goal_variance_fields
}

"""aggregate avg on columns"""
type goal_avg_fields {
  id: Float
  period: Float
  target_number: Float
  user_id: Float
}

"""
Boolean expression to filter rows from the table "goal". All fields are combined with a logical 'AND'.
"""
input goal_bool_exp {
  _and: [goal_bool_exp!]
  _not: goal_bool_exp
  _or: [goal_bool_exp!]
  created: timestamptz_comparison_exp
  id: Int_comparison_exp
  last_todo_mutated: timestamptz_comparison_exp
  name: String_comparison_exp
  nl_description: String_comparison_exp
  period: Int_comparison_exp
  status: String_comparison_exp
  target_number: Int_comparison_exp
  todos: todo_bool_exp
  todos_aggregate: todo_aggregate_bool_exp
  user: user_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "goal"
"""
enum goal_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  goal_pkey
}

"""
input type for incrementing numeric columns in table "goal"
"""
input goal_inc_input {
  id: Int
  period: Int
  target_number: Int
  user_id: Int
}

"""
input type for inserting data into table "goal"
"""
input goal_insert_input {
  created: timestamptz
  id: Int
  last_todo_mutated: timestamptz
  name: String
  nl_description: String
  period: Int
  status: String
  target_number: Int
  todos: todo_arr_rel_insert_input
  user: user_obj_rel_insert_input
  user_id: Int
}

"""aggregate max on columns"""
type goal_max_fields {
  created: timestamptz
  id: Int
  last_todo_mutated: timestamptz
  name: String
  nl_description: String
  period: Int
  status: String
  target_number: Int
  user_id: Int
}

"""aggregate min on columns"""
type goal_min_fields {
  created: timestamptz
  id: Int
  last_todo_mutated: timestamptz
  name: String
  nl_description: String
  period: Int
  status: String
  target_number: Int
  user_id: Int
}

"""
response of any mutation on the table "goal"
"""
type goal_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [goal!]!
}

"""
input type for inserting object relation for remote table "goal"
"""
input goal_obj_rel_insert_input {
  data: goal_insert_input!

  """upsert condition"""
  on_conflict: goal_on_conflict
}

"""
on_conflict condition type for table "goal"
"""
input goal_on_conflict {
  constraint: goal_constraint!
  update_columns: [goal_update_column!]! = []
  where: goal_bool_exp
}

"""Ordering options when selecting data from "goal"."""
input goal_order_by {
  created: order_by
  id: order_by
  last_todo_mutated: order_by
  name: order_by
  nl_description: order_by
  period: order_by
  status: order_by
  target_number: order_by
  todos_aggregate: todo_aggregate_order_by
  user: user_order_by
  user_id: order_by
}

"""primary key columns input for table: goal"""
input goal_pk_columns_input {
  id: Int!
}

"""
select columns of table "goal"
"""
enum goal_select_column {
  """column name"""
  created

  """column name"""
  id

  """column name"""
  last_todo_mutated

  """column name"""
  name

  """column name"""
  nl_description

  """column name"""
  period

  """column name"""
  status

  """column name"""
  target_number

  """column name"""
  user_id
}

"""
input type for updating data in table "goal"
"""
input goal_set_input {
  created: timestamptz
  id: Int
  last_todo_mutated: timestamptz
  name: String
  nl_description: String
  period: Int
  status: String
  target_number: Int
  user_id: Int
}

"""aggregate stddev on columns"""
type goal_stddev_fields {
  id: Float
  period: Float
  target_number: Float
  user_id: Float
}

"""aggregate stddev_pop on columns"""
type goal_stddev_pop_fields {
  id: Float
  period: Float
  target_number: Float
  user_id: Float
}

"""aggregate stddev_samp on columns"""
type goal_stddev_samp_fields {
  id: Float
  period: Float
  target_number: Float
  user_id: Float
}

"""
Streaming cursor of the table "goal"
"""
input goal_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: goal_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input goal_stream_cursor_value_input {
  created: timestamptz
  id: Int
  last_todo_mutated: timestamptz
  name: String
  nl_description: String
  period: Int
  status: String
  target_number: Int
  user_id: Int
}

"""aggregate sum on columns"""
type goal_sum_fields {
  id: Int
  period: Int
  target_number: Int
  user_id: Int
}

"""
update columns of table "goal"
"""
enum goal_update_column {
  """column name"""
  created

  """column name"""
  id

  """column name"""
  last_todo_mutated

  """column name"""
  name

  """column name"""
  nl_description

  """column name"""
  period

  """column name"""
  status

  """column name"""
  target_number

  """column name"""
  user_id
}

input goal_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: goal_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: goal_set_input

  """filter the rows which have to be updated"""
  where: goal_bool_exp!
}

"""aggregate var_pop on columns"""
type goal_var_pop_fields {
  id: Float
  period: Float
  target_number: Float
  user_id: Float
}

"""aggregate var_samp on columns"""
type goal_var_samp_fields {
  id: Float
  period: Float
  target_number: Float
  user_id: Float
}

"""aggregate variance on columns"""
type goal_variance_fields {
  id: Float
  period: Float
  target_number: Float
  user_id: Float
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "interactions"
"""
type interactions {
  content: String!
  content_type: String
  embedding: vector!
  id: Int!
  timestamp: timestamptz
  user_id: Int!
}

"""
aggregated selection of "interactions"
"""
type interactions_aggregate {
  aggregate: interactions_aggregate_fields
  nodes: [interactions!]!
}

"""
aggregate fields of "interactions"
"""
type interactions_aggregate_fields {
  avg: interactions_avg_fields
  count(columns: [interactions_select_column!], distinct: Boolean): Int!
  max: interactions_max_fields
  min: interactions_min_fields
  stddev: interactions_stddev_fields
  stddev_pop: interactions_stddev_pop_fields
  stddev_samp: interactions_stddev_samp_fields
  sum: interactions_sum_fields
  var_pop: interactions_var_pop_fields
  var_samp: interactions_var_samp_fields
  variance: interactions_variance_fields
}

"""aggregate avg on columns"""
type interactions_avg_fields {
  id: Float
  user_id: Float
}

"""
Boolean expression to filter rows from the table "interactions". All fields are combined with a logical 'AND'.
"""
input interactions_bool_exp {
  _and: [interactions_bool_exp!]
  _not: interactions_bool_exp
  _or: [interactions_bool_exp!]
  content: String_comparison_exp
  content_type: String_comparison_exp
  embedding: vector_comparison_exp
  id: Int_comparison_exp
  timestamp: timestamptz_comparison_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "interactions"
"""
enum interactions_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  interactions_pkey
}

"""
input type for incrementing numeric columns in table "interactions"
"""
input interactions_inc_input {
  id: Int
  user_id: Int
}

"""
input type for inserting data into table "interactions"
"""
input interactions_insert_input {
  content: String
  content_type: String
  embedding: vector
  id: Int
  timestamp: timestamptz
  user_id: Int
}

"""aggregate max on columns"""
type interactions_max_fields {
  content: String
  content_type: String
  id: Int
  timestamp: timestamptz
  user_id: Int
}

"""aggregate min on columns"""
type interactions_min_fields {
  content: String
  content_type: String
  id: Int
  timestamp: timestamptz
  user_id: Int
}

"""
response of any mutation on the table "interactions"
"""
type interactions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [interactions!]!
}

"""
input type for inserting object relation for remote table "interactions"
"""
input interactions_obj_rel_insert_input {
  data: interactions_insert_input!

  """upsert condition"""
  on_conflict: interactions_on_conflict
}

"""
on_conflict condition type for table "interactions"
"""
input interactions_on_conflict {
  constraint: interactions_constraint!
  update_columns: [interactions_update_column!]! = []
  where: interactions_bool_exp
}

"""Ordering options when selecting data from "interactions"."""
input interactions_order_by {
  content: order_by
  content_type: order_by
  embedding: order_by
  id: order_by
  timestamp: order_by
  user_id: order_by
}

"""primary key columns input for table: interactions"""
input interactions_pk_columns_input {
  id: Int!
}

"""
select columns of table "interactions"
"""
enum interactions_select_column {
  """column name"""
  content

  """column name"""
  content_type

  """column name"""
  embedding

  """column name"""
  id

  """column name"""
  timestamp

  """column name"""
  user_id
}

"""
input type for updating data in table "interactions"
"""
input interactions_set_input {
  content: String
  content_type: String
  embedding: vector
  id: Int
  timestamp: timestamptz
  user_id: Int
}

"""aggregate stddev on columns"""
type interactions_stddev_fields {
  id: Float
  user_id: Float
}

"""aggregate stddev_pop on columns"""
type interactions_stddev_pop_fields {
  id: Float
  user_id: Float
}

"""aggregate stddev_samp on columns"""
type interactions_stddev_samp_fields {
  id: Float
  user_id: Float
}

"""
Streaming cursor of the table "interactions"
"""
input interactions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: interactions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input interactions_stream_cursor_value_input {
  content: String
  content_type: String
  embedding: vector
  id: Int
  timestamp: timestamptz
  user_id: Int
}

"""aggregate sum on columns"""
type interactions_sum_fields {
  id: Int
  user_id: Int
}

"""
update columns of table "interactions"
"""
enum interactions_update_column {
  """column name"""
  content

  """column name"""
  content_type

  """column name"""
  embedding

  """column name"""
  id

  """column name"""
  timestamp

  """column name"""
  user_id
}

input interactions_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: interactions_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: interactions_set_input

  """filter the rows which have to be updated"""
  where: interactions_bool_exp!
}

"""aggregate var_pop on columns"""
type interactions_var_pop_fields {
  id: Float
  user_id: Float
}

"""aggregate var_samp on columns"""
type interactions_var_samp_fields {
  id: Float
  user_id: Float
}

"""aggregate variance on columns"""
type interactions_variance_fields {
  id: Float
  user_id: Float
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

input match_interactions_args {
  match_threshold: float8
  query_embedding: vector
  target_user_id: Int
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "event_tag"
  """
  delete_event_tag(
    """filter the rows which have to be deleted"""
    where: event_tag_bool_exp!
  ): event_tag_mutation_response

  """
  delete single row from the table: "event_tag"
  """
  delete_event_tag_by_pk(event_id: Int!, tag_name: String!): event_tag

  """
  delete data from the table: "event_types"
  """
  delete_event_types(
    """filter the rows which have to be deleted"""
    where: event_types_bool_exp!
  ): event_types_mutation_response

  """
  delete single row from the table: "event_types"
  """
  delete_event_types_by_pk(name: String!): event_types

  """
  delete data from the table: "events"
  """
  delete_events(
    """filter the rows which have to be deleted"""
    where: events_bool_exp!
  ): events_mutation_response

  """
  delete single row from the table: "events"
  """
  delete_events_by_pk(id: Int!): events

  """
  delete data from the table: "goal"
  """
  delete_goal(
    """filter the rows which have to be deleted"""
    where: goal_bool_exp!
  ): goal_mutation_response

  """
  delete single row from the table: "goal"
  """
  delete_goal_by_pk(id: Int!): goal

  """
  delete data from the table: "interactions"
  """
  delete_interactions(
    """filter the rows which have to be deleted"""
    where: interactions_bool_exp!
  ): interactions_mutation_response

  """
  delete single row from the table: "interactions"
  """
  delete_interactions_by_pk(id: Int!): interactions

  """
  delete data from the table: "todo"
  """
  delete_todo(
    """filter the rows which have to be deleted"""
    where: todo_bool_exp!
  ): todo_mutation_response

  """
  delete single row from the table: "todo"
  """
  delete_todo_by_pk(id: Int!): todo

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(id: Int!): user

  """
  insert data into the table: "event_tag"
  """
  insert_event_tag(
    """the rows to be inserted"""
    objects: [event_tag_insert_input!]!

    """upsert condition"""
    on_conflict: event_tag_on_conflict
  ): event_tag_mutation_response

  """
  insert a single row into the table: "event_tag"
  """
  insert_event_tag_one(
    """the row to be inserted"""
    object: event_tag_insert_input!

    """upsert condition"""
    on_conflict: event_tag_on_conflict
  ): event_tag

  """
  insert data into the table: "event_types"
  """
  insert_event_types(
    """the rows to be inserted"""
    objects: [event_types_insert_input!]!

    """upsert condition"""
    on_conflict: event_types_on_conflict
  ): event_types_mutation_response

  """
  insert a single row into the table: "event_types"
  """
  insert_event_types_one(
    """the row to be inserted"""
    object: event_types_insert_input!

    """upsert condition"""
    on_conflict: event_types_on_conflict
  ): event_types

  """
  insert data into the table: "events"
  """
  insert_events(
    """the rows to be inserted"""
    objects: [events_insert_input!]!

    """upsert condition"""
    on_conflict: events_on_conflict
  ): events_mutation_response

  """
  insert a single row into the table: "events"
  """
  insert_events_one(
    """the row to be inserted"""
    object: events_insert_input!

    """upsert condition"""
    on_conflict: events_on_conflict
  ): events

  """
  insert data into the table: "goal"
  """
  insert_goal(
    """the rows to be inserted"""
    objects: [goal_insert_input!]!

    """upsert condition"""
    on_conflict: goal_on_conflict
  ): goal_mutation_response

  """
  insert a single row into the table: "goal"
  """
  insert_goal_one(
    """the row to be inserted"""
    object: goal_insert_input!

    """upsert condition"""
    on_conflict: goal_on_conflict
  ): goal

  """
  insert data into the table: "interactions"
  """
  insert_interactions(
    """the rows to be inserted"""
    objects: [interactions_insert_input!]!

    """upsert condition"""
    on_conflict: interactions_on_conflict
  ): interactions_mutation_response

  """
  insert a single row into the table: "interactions"
  """
  insert_interactions_one(
    """the row to be inserted"""
    object: interactions_insert_input!

    """upsert condition"""
    on_conflict: interactions_on_conflict
  ): interactions

  """
  insert data into the table: "todo"
  """
  insert_todo(
    """the rows to be inserted"""
    objects: [todo_insert_input!]!

    """upsert condition"""
    on_conflict: todo_on_conflict
  ): todo_mutation_response

  """
  insert a single row into the table: "todo"
  """
  insert_todo_one(
    """the row to be inserted"""
    object: todo_insert_input!

    """upsert condition"""
    on_conflict: todo_on_conflict
  ): todo

  """
  insert data into the table: "user"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user

  """
  update data of the table: "event_tag"
  """
  update_event_tag(
    """increments the numeric columns with given value of the filtered values"""
    _inc: event_tag_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: event_tag_set_input

    """filter the rows which have to be updated"""
    where: event_tag_bool_exp!
  ): event_tag_mutation_response

  """
  update single row of the table: "event_tag"
  """
  update_event_tag_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: event_tag_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: event_tag_set_input
    pk_columns: event_tag_pk_columns_input!
  ): event_tag

  """
  update multiples rows of table: "event_tag"
  """
  update_event_tag_many(
    """updates to execute, in order"""
    updates: [event_tag_updates!]!
  ): [event_tag_mutation_response]

  """
  update data of the table: "event_types"
  """
  update_event_types(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: event_types_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: event_types_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: event_types_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: event_types_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: event_types_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: event_types_set_input

    """filter the rows which have to be updated"""
    where: event_types_bool_exp!
  ): event_types_mutation_response

  """
  update single row of the table: "event_types"
  """
  update_event_types_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: event_types_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: event_types_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: event_types_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: event_types_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: event_types_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: event_types_set_input
    pk_columns: event_types_pk_columns_input!
  ): event_types

  """
  update multiples rows of table: "event_types"
  """
  update_event_types_many(
    """updates to execute, in order"""
    updates: [event_types_updates!]!
  ): [event_types_mutation_response]

  """
  update data of the table: "events"
  """
  update_events(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: events_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: events_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: events_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: events_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: events_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: events_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: events_set_input

    """filter the rows which have to be updated"""
    where: events_bool_exp!
  ): events_mutation_response

  """
  update single row of the table: "events"
  """
  update_events_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: events_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: events_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: events_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: events_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: events_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: events_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: events_set_input
    pk_columns: events_pk_columns_input!
  ): events

  """
  update multiples rows of table: "events"
  """
  update_events_many(
    """updates to execute, in order"""
    updates: [events_updates!]!
  ): [events_mutation_response]

  """
  update data of the table: "goal"
  """
  update_goal(
    """increments the numeric columns with given value of the filtered values"""
    _inc: goal_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: goal_set_input

    """filter the rows which have to be updated"""
    where: goal_bool_exp!
  ): goal_mutation_response

  """
  update single row of the table: "goal"
  """
  update_goal_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: goal_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: goal_set_input
    pk_columns: goal_pk_columns_input!
  ): goal

  """
  update multiples rows of table: "goal"
  """
  update_goal_many(
    """updates to execute, in order"""
    updates: [goal_updates!]!
  ): [goal_mutation_response]

  """
  update data of the table: "interactions"
  """
  update_interactions(
    """increments the numeric columns with given value of the filtered values"""
    _inc: interactions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: interactions_set_input

    """filter the rows which have to be updated"""
    where: interactions_bool_exp!
  ): interactions_mutation_response

  """
  update single row of the table: "interactions"
  """
  update_interactions_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: interactions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: interactions_set_input
    pk_columns: interactions_pk_columns_input!
  ): interactions

  """
  update multiples rows of table: "interactions"
  """
  update_interactions_many(
    """updates to execute, in order"""
    updates: [interactions_updates!]!
  ): [interactions_mutation_response]

  """
  update data of the table: "todo"
  """
  update_todo(
    """increments the numeric columns with given value of the filtered values"""
    _inc: todo_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: todo_set_input

    """filter the rows which have to be updated"""
    where: todo_bool_exp!
  ): todo_mutation_response

  """
  update single row of the table: "todo"
  """
  update_todo_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: todo_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: todo_set_input
    pk_columns: todo_pk_columns_input!
  ): todo

  """
  update multiples rows of table: "todo"
  """
  update_todo_many(
    """updates to execute, in order"""
    updates: [todo_updates!]!
  ): [todo_mutation_response]

  """
  update data of the table: "user"
  """
  update_user(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user

  """
  update multiples rows of table: "user"
  """
  update_user_many(
    """updates to execute, in order"""
    updates: [user_updates!]!
  ): [user_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "event_tag"
  """
  event_tag(
    """distinct select on columns"""
    distinct_on: [event_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_tag_order_by!]

    """filter the rows returned"""
    where: event_tag_bool_exp
  ): [event_tag!]!

  """
  fetch aggregated fields from the table: "event_tag"
  """
  event_tag_aggregate(
    """distinct select on columns"""
    distinct_on: [event_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_tag_order_by!]

    """filter the rows returned"""
    where: event_tag_bool_exp
  ): event_tag_aggregate!

  """fetch data from the table: "event_tag" using primary key columns"""
  event_tag_by_pk(event_id: Int!, tag_name: String!): event_tag

  """
  fetch data from the table: "event_types"
  """
  event_types(
    """distinct select on columns"""
    distinct_on: [event_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_types_order_by!]

    """filter the rows returned"""
    where: event_types_bool_exp
  ): [event_types!]!

  """
  fetch aggregated fields from the table: "event_types"
  """
  event_types_aggregate(
    """distinct select on columns"""
    distinct_on: [event_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_types_order_by!]

    """filter the rows returned"""
    where: event_types_bool_exp
  ): event_types_aggregate!

  """fetch data from the table: "event_types" using primary key columns"""
  event_types_by_pk(name: String!): event_types

  """
  fetch data from the table: "events"
  """
  events(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!

  """
  fetch aggregated fields from the table: "events"
  """
  events_aggregate(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): events_aggregate!

  """fetch data from the table: "events" using primary key columns"""
  events_by_pk(id: Int!): events

  """
  fetch data from the table: "goal"
  """
  goal(
    """distinct select on columns"""
    distinct_on: [goal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goal_order_by!]

    """filter the rows returned"""
    where: goal_bool_exp
  ): [goal!]!

  """
  fetch aggregated fields from the table: "goal"
  """
  goal_aggregate(
    """distinct select on columns"""
    distinct_on: [goal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goal_order_by!]

    """filter the rows returned"""
    where: goal_bool_exp
  ): goal_aggregate!

  """fetch data from the table: "goal" using primary key columns"""
  goal_by_pk(id: Int!): goal

  """
  fetch data from the table: "interactions"
  """
  interactions(
    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): [interactions!]!

  """
  fetch aggregated fields from the table: "interactions"
  """
  interactions_aggregate(
    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): interactions_aggregate!

  """fetch data from the table: "interactions" using primary key columns"""
  interactions_by_pk(id: Int!): interactions

  """
  execute function "match_interactions" which returns "interactions"
  """
  match_interactions(
    """
    input parameters for function "match_interactions"
    """
    args: match_interactions_args!

    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): [interactions!]!

  """
  execute function "match_interactions" and query aggregates on result of table type "interactions"
  """
  match_interactions_aggregate(
    """
    input parameters for function "match_interactions_aggregate"
    """
    args: match_interactions_args!

    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): interactions_aggregate!

  """
  fetch data from the table: "todo"
  """
  todo(
    """distinct select on columns"""
    distinct_on: [todo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todo_order_by!]

    """filter the rows returned"""
    where: todo_bool_exp
  ): [todo!]!

  """
  fetch aggregated fields from the table: "todo"
  """
  todo_aggregate(
    """distinct select on columns"""
    distinct_on: [todo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todo_order_by!]

    """filter the rows returned"""
    where: todo_bool_exp
  ): todo_aggregate!

  """fetch data from the table: "todo" using primary key columns"""
  todo_by_pk(id: Int!): todo

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: Int!): user
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "event_tag"
  """
  event_tag(
    """distinct select on columns"""
    distinct_on: [event_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_tag_order_by!]

    """filter the rows returned"""
    where: event_tag_bool_exp
  ): [event_tag!]!

  """
  fetch aggregated fields from the table: "event_tag"
  """
  event_tag_aggregate(
    """distinct select on columns"""
    distinct_on: [event_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_tag_order_by!]

    """filter the rows returned"""
    where: event_tag_bool_exp
  ): event_tag_aggregate!

  """fetch data from the table: "event_tag" using primary key columns"""
  event_tag_by_pk(event_id: Int!, tag_name: String!): event_tag

  """
  fetch data from the table in a streaming manner: "event_tag"
  """
  event_tag_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [event_tag_stream_cursor_input]!

    """filter the rows returned"""
    where: event_tag_bool_exp
  ): [event_tag!]!

  """
  fetch data from the table: "event_types"
  """
  event_types(
    """distinct select on columns"""
    distinct_on: [event_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_types_order_by!]

    """filter the rows returned"""
    where: event_types_bool_exp
  ): [event_types!]!

  """
  fetch aggregated fields from the table: "event_types"
  """
  event_types_aggregate(
    """distinct select on columns"""
    distinct_on: [event_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_types_order_by!]

    """filter the rows returned"""
    where: event_types_bool_exp
  ): event_types_aggregate!

  """fetch data from the table: "event_types" using primary key columns"""
  event_types_by_pk(name: String!): event_types

  """
  fetch data from the table in a streaming manner: "event_types"
  """
  event_types_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [event_types_stream_cursor_input]!

    """filter the rows returned"""
    where: event_types_bool_exp
  ): [event_types!]!

  """
  fetch data from the table: "events"
  """
  events(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!

  """
  fetch aggregated fields from the table: "events"
  """
  events_aggregate(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): events_aggregate!

  """fetch data from the table: "events" using primary key columns"""
  events_by_pk(id: Int!): events

  """
  fetch data from the table in a streaming manner: "events"
  """
  events_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [events_stream_cursor_input]!

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!

  """
  fetch data from the table: "goal"
  """
  goal(
    """distinct select on columns"""
    distinct_on: [goal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goal_order_by!]

    """filter the rows returned"""
    where: goal_bool_exp
  ): [goal!]!

  """
  fetch aggregated fields from the table: "goal"
  """
  goal_aggregate(
    """distinct select on columns"""
    distinct_on: [goal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goal_order_by!]

    """filter the rows returned"""
    where: goal_bool_exp
  ): goal_aggregate!

  """fetch data from the table: "goal" using primary key columns"""
  goal_by_pk(id: Int!): goal

  """
  fetch data from the table in a streaming manner: "goal"
  """
  goal_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [goal_stream_cursor_input]!

    """filter the rows returned"""
    where: goal_bool_exp
  ): [goal!]!

  """
  fetch data from the table: "interactions"
  """
  interactions(
    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): [interactions!]!

  """
  fetch aggregated fields from the table: "interactions"
  """
  interactions_aggregate(
    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): interactions_aggregate!

  """fetch data from the table: "interactions" using primary key columns"""
  interactions_by_pk(id: Int!): interactions

  """
  fetch data from the table in a streaming manner: "interactions"
  """
  interactions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [interactions_stream_cursor_input]!

    """filter the rows returned"""
    where: interactions_bool_exp
  ): [interactions!]!

  """
  execute function "match_interactions" which returns "interactions"
  """
  match_interactions(
    """
    input parameters for function "match_interactions"
    """
    args: match_interactions_args!

    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): [interactions!]!

  """
  execute function "match_interactions" and query aggregates on result of table type "interactions"
  """
  match_interactions_aggregate(
    """
    input parameters for function "match_interactions_aggregate"
    """
    args: match_interactions_args!

    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): interactions_aggregate!

  """
  fetch data from the table: "todo"
  """
  todo(
    """distinct select on columns"""
    distinct_on: [todo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todo_order_by!]

    """filter the rows returned"""
    where: todo_bool_exp
  ): [todo!]!

  """
  fetch aggregated fields from the table: "todo"
  """
  todo_aggregate(
    """distinct select on columns"""
    distinct_on: [todo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todo_order_by!]

    """filter the rows returned"""
    where: todo_bool_exp
  ): todo_aggregate!

  """fetch data from the table: "todo" using primary key columns"""
  todo_by_pk(id: Int!): todo

  """
  fetch data from the table in a streaming manner: "todo"
  """
  todo_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [todo_stream_cursor_input]!

    """filter the rows returned"""
    where: todo_bool_exp
  ): [todo!]!

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: Int!): user

  """
  fetch data from the table in a streaming manner: "user"
  """
  user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_stream_cursor_input]!

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "todo"
"""
type todo {
  created: timestamptz!
  current_count: Int
  due: timestamptz!

  """An object relationship"""
  goal: goal
  goal_id: Int
  id: Int!
  name: String!
  status: String!
  target_count: Int

  """An object relationship"""
  user: user!
  user_id: Int!
}

"""
aggregated selection of "todo"
"""
type todo_aggregate {
  aggregate: todo_aggregate_fields
  nodes: [todo!]!
}

input todo_aggregate_bool_exp {
  count: todo_aggregate_bool_exp_count
}

input todo_aggregate_bool_exp_count {
  arguments: [todo_select_column!]
  distinct: Boolean
  filter: todo_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "todo"
"""
type todo_aggregate_fields {
  avg: todo_avg_fields
  count(columns: [todo_select_column!], distinct: Boolean): Int!
  max: todo_max_fields
  min: todo_min_fields
  stddev: todo_stddev_fields
  stddev_pop: todo_stddev_pop_fields
  stddev_samp: todo_stddev_samp_fields
  sum: todo_sum_fields
  var_pop: todo_var_pop_fields
  var_samp: todo_var_samp_fields
  variance: todo_variance_fields
}

"""
order by aggregate values of table "todo"
"""
input todo_aggregate_order_by {
  avg: todo_avg_order_by
  count: order_by
  max: todo_max_order_by
  min: todo_min_order_by
  stddev: todo_stddev_order_by
  stddev_pop: todo_stddev_pop_order_by
  stddev_samp: todo_stddev_samp_order_by
  sum: todo_sum_order_by
  var_pop: todo_var_pop_order_by
  var_samp: todo_var_samp_order_by
  variance: todo_variance_order_by
}

"""
input type for inserting array relation for remote table "todo"
"""
input todo_arr_rel_insert_input {
  data: [todo_insert_input!]!

  """upsert condition"""
  on_conflict: todo_on_conflict
}

"""aggregate avg on columns"""
type todo_avg_fields {
  current_count: Float
  goal_id: Float
  id: Float
  target_count: Float
  user_id: Float
}

"""
order by avg() on columns of table "todo"
"""
input todo_avg_order_by {
  current_count: order_by
  goal_id: order_by
  id: order_by
  target_count: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "todo". All fields are combined with a logical 'AND'.
"""
input todo_bool_exp {
  _and: [todo_bool_exp!]
  _not: todo_bool_exp
  _or: [todo_bool_exp!]
  created: timestamptz_comparison_exp
  current_count: Int_comparison_exp
  due: timestamptz_comparison_exp
  goal: goal_bool_exp
  goal_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  status: String_comparison_exp
  target_count: Int_comparison_exp
  user: user_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "todo"
"""
enum todo_constraint {
  """
  unique or primary key constraint on columns "user_id", "goal_id"
  """
  todo_goal_id_user_id_key

  """
  unique or primary key constraint on columns "id"
  """
  todo_pkey
}

"""
input type for incrementing numeric columns in table "todo"
"""
input todo_inc_input {
  current_count: Int
  goal_id: Int
  id: Int
  target_count: Int
  user_id: Int
}

"""
input type for inserting data into table "todo"
"""
input todo_insert_input {
  created: timestamptz
  current_count: Int
  due: timestamptz
  goal: goal_obj_rel_insert_input
  goal_id: Int
  id: Int
  name: String
  status: String
  target_count: Int
  user: user_obj_rel_insert_input
  user_id: Int
}

"""aggregate max on columns"""
type todo_max_fields {
  created: timestamptz
  current_count: Int
  due: timestamptz
  goal_id: Int
  id: Int
  name: String
  status: String
  target_count: Int
  user_id: Int
}

"""
order by max() on columns of table "todo"
"""
input todo_max_order_by {
  created: order_by
  current_count: order_by
  due: order_by
  goal_id: order_by
  id: order_by
  name: order_by
  status: order_by
  target_count: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type todo_min_fields {
  created: timestamptz
  current_count: Int
  due: timestamptz
  goal_id: Int
  id: Int
  name: String
  status: String
  target_count: Int
  user_id: Int
}

"""
order by min() on columns of table "todo"
"""
input todo_min_order_by {
  created: order_by
  current_count: order_by
  due: order_by
  goal_id: order_by
  id: order_by
  name: order_by
  status: order_by
  target_count: order_by
  user_id: order_by
}

"""
response of any mutation on the table "todo"
"""
type todo_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [todo!]!
}

"""
on_conflict condition type for table "todo"
"""
input todo_on_conflict {
  constraint: todo_constraint!
  update_columns: [todo_update_column!]! = []
  where: todo_bool_exp
}

"""Ordering options when selecting data from "todo"."""
input todo_order_by {
  created: order_by
  current_count: order_by
  due: order_by
  goal: goal_order_by
  goal_id: order_by
  id: order_by
  name: order_by
  status: order_by
  target_count: order_by
  user: user_order_by
  user_id: order_by
}

"""primary key columns input for table: todo"""
input todo_pk_columns_input {
  id: Int!
}

"""
select columns of table "todo"
"""
enum todo_select_column {
  """column name"""
  created

  """column name"""
  current_count

  """column name"""
  due

  """column name"""
  goal_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  status

  """column name"""
  target_count

  """column name"""
  user_id
}

"""
input type for updating data in table "todo"
"""
input todo_set_input {
  created: timestamptz
  current_count: Int
  due: timestamptz
  goal_id: Int
  id: Int
  name: String
  status: String
  target_count: Int
  user_id: Int
}

"""aggregate stddev on columns"""
type todo_stddev_fields {
  current_count: Float
  goal_id: Float
  id: Float
  target_count: Float
  user_id: Float
}

"""
order by stddev() on columns of table "todo"
"""
input todo_stddev_order_by {
  current_count: order_by
  goal_id: order_by
  id: order_by
  target_count: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type todo_stddev_pop_fields {
  current_count: Float
  goal_id: Float
  id: Float
  target_count: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "todo"
"""
input todo_stddev_pop_order_by {
  current_count: order_by
  goal_id: order_by
  id: order_by
  target_count: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type todo_stddev_samp_fields {
  current_count: Float
  goal_id: Float
  id: Float
  target_count: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "todo"
"""
input todo_stddev_samp_order_by {
  current_count: order_by
  goal_id: order_by
  id: order_by
  target_count: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "todo"
"""
input todo_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: todo_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input todo_stream_cursor_value_input {
  created: timestamptz
  current_count: Int
  due: timestamptz
  goal_id: Int
  id: Int
  name: String
  status: String
  target_count: Int
  user_id: Int
}

"""aggregate sum on columns"""
type todo_sum_fields {
  current_count: Int
  goal_id: Int
  id: Int
  target_count: Int
  user_id: Int
}

"""
order by sum() on columns of table "todo"
"""
input todo_sum_order_by {
  current_count: order_by
  goal_id: order_by
  id: order_by
  target_count: order_by
  user_id: order_by
}

"""
update columns of table "todo"
"""
enum todo_update_column {
  """column name"""
  created

  """column name"""
  current_count

  """column name"""
  due

  """column name"""
  goal_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  status

  """column name"""
  target_count

  """column name"""
  user_id
}

input todo_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: todo_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: todo_set_input

  """filter the rows which have to be updated"""
  where: todo_bool_exp!
}

"""aggregate var_pop on columns"""
type todo_var_pop_fields {
  current_count: Float
  goal_id: Float
  id: Float
  target_count: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "todo"
"""
input todo_var_pop_order_by {
  current_count: order_by
  goal_id: order_by
  id: order_by
  target_count: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type todo_var_samp_fields {
  current_count: Float
  goal_id: Float
  id: Float
  target_count: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "todo"
"""
input todo_var_samp_order_by {
  current_count: order_by
  goal_id: order_by
  id: order_by
  target_count: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type todo_variance_fields {
  current_count: Float
  goal_id: Float
  id: Float
  target_count: Float
  user_id: Float
}

"""
order by variance() on columns of table "todo"
"""
input todo_variance_order_by {
  current_count: order_by
  goal_id: order_by
  id: order_by
  target_count: order_by
  user_id: order_by
}

"""
columns and relationships of "user"
"""
type user {
  id: Int!
}

"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  avg: user_avg_fields
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
  stddev: user_stddev_fields
  stddev_pop: user_stddev_pop_fields
  stddev_samp: user_stddev_samp_fields
  sum: user_sum_fields
  var_pop: user_var_pop_fields
  var_samp: user_var_samp_fields
  variance: user_variance_fields
}

"""aggregate avg on columns"""
type user_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  id: Int_comparison_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_pkey
}

"""
input type for incrementing numeric columns in table "user"
"""
input user_inc_input {
  id: Int
}

"""
input type for inserting data into table "user"
"""
input user_insert_input {
  id: Int
}

"""aggregate max on columns"""
type user_max_fields {
  id: Int
}

"""aggregate min on columns"""
type user_min_fields {
  id: Int
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
input type for inserting object relation for remote table "user"
"""
input user_obj_rel_insert_input {
  data: user_insert_input!

  """upsert condition"""
  on_conflict: user_on_conflict
}

"""
on_conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  id: order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  id: Int!
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  id
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  id: Int
}

"""aggregate stddev on columns"""
type user_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type user_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type user_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "user"
"""
input user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_stream_cursor_value_input {
  id: Int
}

"""aggregate sum on columns"""
type user_sum_fields {
  id: Int
}

"""
update columns of table "user"
"""
enum user_update_column {
  """column name"""
  id
}

input user_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: user_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: user_set_input

  """filter the rows which have to be updated"""
  where: user_bool_exp!
}

"""aggregate var_pop on columns"""
type user_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type user_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type user_variance_fields {
  id: Float
}

scalar vector

"""
Boolean expression to compare columns of type "vector". All fields are combined with logical 'AND'.
"""
input vector_comparison_exp {
  _eq: vector
  _gt: vector
  _gte: vector
  _in: [vector!]
  _is_null: Boolean
  _lt: vector
  _lte: vector
  _neq: vector
  _nin: [vector!]
}
