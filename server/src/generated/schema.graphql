schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
columns and relationships of "associations"
"""
type associations {
  id: Int!
  ref_one_id: Int!
  ref_one_table: String!
  ref_two_id: Int!
  ref_two_table: String!
  user_id: Int!
}

"""
aggregated selection of "associations"
"""
type associations_aggregate {
  aggregate: associations_aggregate_fields
  nodes: [associations!]!
}

"""
aggregate fields of "associations"
"""
type associations_aggregate_fields {
  avg: associations_avg_fields
  count(columns: [associations_select_column!], distinct: Boolean): Int!
  max: associations_max_fields
  min: associations_min_fields
  stddev: associations_stddev_fields
  stddev_pop: associations_stddev_pop_fields
  stddev_samp: associations_stddev_samp_fields
  sum: associations_sum_fields
  var_pop: associations_var_pop_fields
  var_samp: associations_var_samp_fields
  variance: associations_variance_fields
}

"""
order by aggregate values of table "associations"
"""
input associations_aggregate_order_by {
  avg: associations_avg_order_by
  count: order_by
  max: associations_max_order_by
  min: associations_min_order_by
  stddev: associations_stddev_order_by
  stddev_pop: associations_stddev_pop_order_by
  stddev_samp: associations_stddev_samp_order_by
  sum: associations_sum_order_by
  var_pop: associations_var_pop_order_by
  var_samp: associations_var_samp_order_by
  variance: associations_variance_order_by
}

"""aggregate avg on columns"""
type associations_avg_fields {
  id: Float
  ref_one_id: Float
  ref_two_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "associations"
"""
input associations_avg_order_by {
  id: order_by
  ref_one_id: order_by
  ref_two_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "associations". All fields are combined with a logical 'AND'.
"""
input associations_bool_exp {
  _and: [associations_bool_exp!]
  _not: associations_bool_exp
  _or: [associations_bool_exp!]
  id: Int_comparison_exp
  ref_one_id: Int_comparison_exp
  ref_one_table: String_comparison_exp
  ref_two_id: Int_comparison_exp
  ref_two_table: String_comparison_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "associations"
"""
enum associations_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  associations_pkey

  """
  unique or primary key constraint on columns "ref_one_table", "ref_two_table", "ref_one_id", "ref_two_id"
  """
  associations_ref_one_id_ref_one_table_ref_two_id_ref_two_table_
}

"""
input type for incrementing numeric columns in table "associations"
"""
input associations_inc_input {
  id: Int
  ref_one_id: Int
  ref_two_id: Int
  user_id: Int
}

"""
input type for inserting data into table "associations"
"""
input associations_insert_input {
  id: Int
  ref_one_id: Int
  ref_one_table: String
  ref_two_id: Int
  ref_two_table: String
  user_id: Int
}

"""aggregate max on columns"""
type associations_max_fields {
  id: Int
  ref_one_id: Int
  ref_one_table: String
  ref_two_id: Int
  ref_two_table: String
  user_id: Int
}

"""
order by max() on columns of table "associations"
"""
input associations_max_order_by {
  id: order_by
  ref_one_id: order_by
  ref_one_table: order_by
  ref_two_id: order_by
  ref_two_table: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type associations_min_fields {
  id: Int
  ref_one_id: Int
  ref_one_table: String
  ref_two_id: Int
  ref_two_table: String
  user_id: Int
}

"""
order by min() on columns of table "associations"
"""
input associations_min_order_by {
  id: order_by
  ref_one_id: order_by
  ref_one_table: order_by
  ref_two_id: order_by
  ref_two_table: order_by
  user_id: order_by
}

"""
response of any mutation on the table "associations"
"""
type associations_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [associations!]!
}

"""
on_conflict condition type for table "associations"
"""
input associations_on_conflict {
  constraint: associations_constraint!
  update_columns: [associations_update_column!]! = []
  where: associations_bool_exp
}

"""Ordering options when selecting data from "associations"."""
input associations_order_by {
  id: order_by
  ref_one_id: order_by
  ref_one_table: order_by
  ref_two_id: order_by
  ref_two_table: order_by
  user_id: order_by
}

"""primary key columns input for table: associations"""
input associations_pk_columns_input {
  id: Int!
}

"""
select columns of table "associations"
"""
enum associations_select_column {
  """column name"""
  id

  """column name"""
  ref_one_id

  """column name"""
  ref_one_table

  """column name"""
  ref_two_id

  """column name"""
  ref_two_table

  """column name"""
  user_id
}

"""
input type for updating data in table "associations"
"""
input associations_set_input {
  id: Int
  ref_one_id: Int
  ref_one_table: String
  ref_two_id: Int
  ref_two_table: String
  user_id: Int
}

"""aggregate stddev on columns"""
type associations_stddev_fields {
  id: Float
  ref_one_id: Float
  ref_two_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "associations"
"""
input associations_stddev_order_by {
  id: order_by
  ref_one_id: order_by
  ref_two_id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type associations_stddev_pop_fields {
  id: Float
  ref_one_id: Float
  ref_two_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "associations"
"""
input associations_stddev_pop_order_by {
  id: order_by
  ref_one_id: order_by
  ref_two_id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type associations_stddev_samp_fields {
  id: Float
  ref_one_id: Float
  ref_two_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "associations"
"""
input associations_stddev_samp_order_by {
  id: order_by
  ref_one_id: order_by
  ref_two_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "associations"
"""
input associations_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: associations_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input associations_stream_cursor_value_input {
  id: Int
  ref_one_id: Int
  ref_one_table: String
  ref_two_id: Int
  ref_two_table: String
  user_id: Int
}

"""aggregate sum on columns"""
type associations_sum_fields {
  id: Int
  ref_one_id: Int
  ref_two_id: Int
  user_id: Int
}

"""
order by sum() on columns of table "associations"
"""
input associations_sum_order_by {
  id: order_by
  ref_one_id: order_by
  ref_two_id: order_by
  user_id: order_by
}

"""
update columns of table "associations"
"""
enum associations_update_column {
  """column name"""
  id

  """column name"""
  ref_one_id

  """column name"""
  ref_one_table

  """column name"""
  ref_two_id

  """column name"""
  ref_two_table

  """column name"""
  user_id
}

input associations_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: associations_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: associations_set_input

  """filter the rows which have to be updated"""
  where: associations_bool_exp!
}

"""aggregate var_pop on columns"""
type associations_var_pop_fields {
  id: Float
  ref_one_id: Float
  ref_two_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "associations"
"""
input associations_var_pop_order_by {
  id: order_by
  ref_one_id: order_by
  ref_two_id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type associations_var_samp_fields {
  id: Float
  ref_one_id: Float
  ref_two_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "associations"
"""
input associations_var_samp_order_by {
  id: order_by
  ref_one_id: order_by
  ref_two_id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type associations_variance_fields {
  id: Float
  ref_one_id: Float
  ref_two_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "associations"
"""
input associations_variance_order_by {
  id: order_by
  ref_one_id: order_by
  ref_two_id: order_by
  user_id: order_by
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

input closest_user_location_args {
  radius: float8
  ref_point: String
  user_row: users_scalar
}

input closest_user_location_users_args {
  radius: float8
  ref_point: String
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "event_types"
"""
type event_types {
  """An array relationship"""
  children(
    """distinct select on columns"""
    distinct_on: [event_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_types_order_by!]

    """filter the rows returned"""
    where: event_types_bool_exp
  ): [event_types!]!

  """An aggregate relationship"""
  children_aggregate(
    """distinct select on columns"""
    distinct_on: [event_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_types_order_by!]

    """filter the rows returned"""
    where: event_types_bool_exp
  ): event_types_aggregate!
  embedding: vector
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  name: String!
  parent: String

  """
  A computed field, executes function "get_event_type_path"
  """
  parent_tree: String
}

"""
aggregated selection of "event_types"
"""
type event_types_aggregate {
  aggregate: event_types_aggregate_fields
  nodes: [event_types!]!
}

input event_types_aggregate_bool_exp {
  count: event_types_aggregate_bool_exp_count
}

input event_types_aggregate_bool_exp_count {
  arguments: [event_types_select_column!]
  distinct: Boolean
  filter: event_types_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "event_types"
"""
type event_types_aggregate_fields {
  count(columns: [event_types_select_column!], distinct: Boolean): Int!
  max: event_types_max_fields
  min: event_types_min_fields
}

"""
order by aggregate values of table "event_types"
"""
input event_types_aggregate_order_by {
  count: order_by
  max: event_types_max_order_by
  min: event_types_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input event_types_append_input {
  metadata: jsonb
}

"""
input type for inserting array relation for remote table "event_types"
"""
input event_types_arr_rel_insert_input {
  data: [event_types_insert_input!]!

  """upsert condition"""
  on_conflict: event_types_on_conflict
}

"""
Boolean expression to filter rows from the table "event_types". All fields are combined with a logical 'AND'.
"""
input event_types_bool_exp {
  _and: [event_types_bool_exp!]
  _not: event_types_bool_exp
  _or: [event_types_bool_exp!]
  children: event_types_bool_exp
  children_aggregate: event_types_aggregate_bool_exp
  embedding: vector_comparison_exp
  metadata: jsonb_comparison_exp
  name: String_comparison_exp
  parent: String_comparison_exp
  parent_tree: String_comparison_exp
}

"""
unique or primary key constraints on table "event_types"
"""
enum event_types_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  tags_name_key

  """
  unique or primary key constraint on columns "name"
  """
  tags_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input event_types_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input event_types_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input event_types_delete_key_input {
  metadata: String
}

"""
input type for inserting data into table "event_types"
"""
input event_types_insert_input {
  children: event_types_arr_rel_insert_input
  embedding: vector
  metadata: jsonb
  name: String
  parent: String
}

"""aggregate max on columns"""
type event_types_max_fields {
  name: String
  parent: String

  """
  A computed field, executes function "get_event_type_path"
  """
  parent_tree: String
}

"""
order by max() on columns of table "event_types"
"""
input event_types_max_order_by {
  name: order_by
  parent: order_by
}

"""aggregate min on columns"""
type event_types_min_fields {
  name: String
  parent: String

  """
  A computed field, executes function "get_event_type_path"
  """
  parent_tree: String
}

"""
order by min() on columns of table "event_types"
"""
input event_types_min_order_by {
  name: order_by
  parent: order_by
}

"""
response of any mutation on the table "event_types"
"""
type event_types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [event_types!]!
}

"""
input type for inserting object relation for remote table "event_types"
"""
input event_types_obj_rel_insert_input {
  data: event_types_insert_input!

  """upsert condition"""
  on_conflict: event_types_on_conflict
}

"""
on_conflict condition type for table "event_types"
"""
input event_types_on_conflict {
  constraint: event_types_constraint!
  update_columns: [event_types_update_column!]! = []
  where: event_types_bool_exp
}

"""Ordering options when selecting data from "event_types"."""
input event_types_order_by {
  children_aggregate: event_types_aggregate_order_by
  embedding: order_by
  metadata: order_by
  name: order_by
  parent: order_by
  parent_tree: order_by
}

"""primary key columns input for table: event_types"""
input event_types_pk_columns_input {
  name: String!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input event_types_prepend_input {
  metadata: jsonb
}

"""
select columns of table "event_types"
"""
enum event_types_select_column {
  """column name"""
  embedding

  """column name"""
  metadata

  """column name"""
  name

  """column name"""
  parent
}

"""
input type for updating data in table "event_types"
"""
input event_types_set_input {
  embedding: vector
  metadata: jsonb
  name: String
  parent: String
}

"""
Streaming cursor of the table "event_types"
"""
input event_types_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: event_types_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input event_types_stream_cursor_value_input {
  embedding: vector
  metadata: jsonb
  name: String
  parent: String
}

"""
update columns of table "event_types"
"""
enum event_types_update_column {
  """column name"""
  embedding

  """column name"""
  metadata

  """column name"""
  name

  """column name"""
  parent
}

input event_types_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: event_types_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: event_types_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _delete_elem: event_types_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: event_types_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: event_types_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: event_types_set_input

  """filter the rows which have to be updated"""
  where: event_types_bool_exp!
}

"""
columns and relationships of "events"
"""
type events {
  """
  A computed field, executes function "event_associations"
  """
  associations(
    """distinct select on columns"""
    distinct_on: [associations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [associations_order_by!]

    """filter the rows returned"""
    where: associations_bool_exp
  ): [associations!]

  """An array relationship"""
  children(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!

  """An aggregate relationship"""
  children_aggregate(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): events_aggregate!

  """
  A computed field, executes function "event_duration"
  """
  computed_cost_time: Int

  """cents"""
  cost_money: Int

  """seconds"""
  cost_time: Int
  end_time: timestamp
  event_type: String!

  """An object relationship"""
  event_type_object: event_types!
  id: Int!

  """An object relationship"""
  interaction: interactions
  interaction_id: Int

  """
  A computed field, executes function "event_locations"
  """
  locations(
    """distinct select on columns"""
    distinct_on: [locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [locations_order_by!]

    """filter the rows returned"""
    where: locations_bool_exp
  ): [locations!]
  logs(
    """JSON select path"""
    path: String
  ): jsonb
  metadata(
    """JSON select path"""
    path: String
  ): jsonb

  """
  A computed field, executes function "event_objects"
  """
  objects(
    """distinct select on columns"""
    distinct_on: [objects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [objects_order_by!]

    """filter the rows returned"""
    where: objects_bool_exp
  ): [objects!]

  """An object relationship"""
  parent: events
  parent_id: Int
  start_time: timestamp
  status: String

  """An object relationship"""
  user: users!
  user_id: Int!
}

"""
aggregated selection of "events"
"""
type events_aggregate {
  aggregate: events_aggregate_fields
  nodes: [events!]!
}

input events_aggregate_bool_exp {
  count: events_aggregate_bool_exp_count
}

input events_aggregate_bool_exp_count {
  arguments: [events_select_column!]
  distinct: Boolean
  filter: events_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "events"
"""
type events_aggregate_fields {
  avg: events_avg_fields
  count(columns: [events_select_column!], distinct: Boolean): Int!
  max: events_max_fields
  min: events_min_fields
  stddev: events_stddev_fields
  stddev_pop: events_stddev_pop_fields
  stddev_samp: events_stddev_samp_fields
  sum: events_sum_fields
  var_pop: events_var_pop_fields
  var_samp: events_var_samp_fields
  variance: events_variance_fields
}

"""
order by aggregate values of table "events"
"""
input events_aggregate_order_by {
  avg: events_avg_order_by
  count: order_by
  max: events_max_order_by
  min: events_min_order_by
  stddev: events_stddev_order_by
  stddev_pop: events_stddev_pop_order_by
  stddev_samp: events_stddev_samp_order_by
  sum: events_sum_order_by
  var_pop: events_var_pop_order_by
  var_samp: events_var_samp_order_by
  variance: events_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input events_append_input {
  logs: jsonb
  metadata: jsonb
}

"""
input type for inserting array relation for remote table "events"
"""
input events_arr_rel_insert_input {
  data: [events_insert_input!]!

  """upsert condition"""
  on_conflict: events_on_conflict
}

"""aggregate avg on columns"""
type events_avg_fields {
  """
  A computed field, executes function "event_duration"
  """
  computed_cost_time: Int

  """cents"""
  cost_money: Float

  """seconds"""
  cost_time: Float
  id: Float
  interaction_id: Float
  parent_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "events"
"""
input events_avg_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "events". All fields are combined with a logical 'AND'.
"""
input events_bool_exp {
  _and: [events_bool_exp!]
  _not: events_bool_exp
  _or: [events_bool_exp!]
  associations: associations_bool_exp
  children: events_bool_exp
  children_aggregate: events_aggregate_bool_exp
  computed_cost_time: Int_comparison_exp
  cost_money: Int_comparison_exp
  cost_time: Int_comparison_exp
  end_time: timestamp_comparison_exp
  event_type: String_comparison_exp
  event_type_object: event_types_bool_exp
  id: Int_comparison_exp
  interaction: interactions_bool_exp
  interaction_id: Int_comparison_exp
  locations: locations_bool_exp
  logs: jsonb_comparison_exp
  metadata: jsonb_comparison_exp
  objects: objects_bool_exp
  parent: events_bool_exp
  parent_id: Int_comparison_exp
  start_time: timestamp_comparison_exp
  status: String_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "events"
"""
enum events_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  events_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input events_delete_at_path_input {
  logs: [String!]
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input events_delete_elem_input {
  logs: Int
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input events_delete_key_input {
  logs: String
  metadata: String
}

"""
input type for incrementing numeric columns in table "events"
"""
input events_inc_input {
  """cents"""
  cost_money: Int

  """seconds"""
  cost_time: Int
  id: Int
  interaction_id: Int
  parent_id: Int
  user_id: Int
}

"""
input type for inserting data into table "events"
"""
input events_insert_input {
  children: events_arr_rel_insert_input

  """cents"""
  cost_money: Int

  """seconds"""
  cost_time: Int
  end_time: timestamp
  event_type: String
  event_type_object: event_types_obj_rel_insert_input
  id: Int
  interaction: interactions_obj_rel_insert_input
  interaction_id: Int
  logs: jsonb
  metadata: jsonb
  parent: events_obj_rel_insert_input
  parent_id: Int
  start_time: timestamp
  status: String
  user: users_obj_rel_insert_input
  user_id: Int
}

"""aggregate max on columns"""
type events_max_fields {
  """
  A computed field, executes function "event_duration"
  """
  computed_cost_time: Int

  """cents"""
  cost_money: Int

  """seconds"""
  cost_time: Int
  end_time: timestamp
  event_type: String
  id: Int
  interaction_id: Int
  parent_id: Int
  start_time: timestamp
  status: String
  user_id: Int
}

"""
order by max() on columns of table "events"
"""
input events_max_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  end_time: order_by
  event_type: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  start_time: order_by
  status: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type events_min_fields {
  """
  A computed field, executes function "event_duration"
  """
  computed_cost_time: Int

  """cents"""
  cost_money: Int

  """seconds"""
  cost_time: Int
  end_time: timestamp
  event_type: String
  id: Int
  interaction_id: Int
  parent_id: Int
  start_time: timestamp
  status: String
  user_id: Int
}

"""
order by min() on columns of table "events"
"""
input events_min_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  end_time: order_by
  event_type: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  start_time: order_by
  status: order_by
  user_id: order_by
}

"""
response of any mutation on the table "events"
"""
type events_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [events!]!
}

"""
input type for inserting object relation for remote table "events"
"""
input events_obj_rel_insert_input {
  data: events_insert_input!

  """upsert condition"""
  on_conflict: events_on_conflict
}

"""
on_conflict condition type for table "events"
"""
input events_on_conflict {
  constraint: events_constraint!
  update_columns: [events_update_column!]! = []
  where: events_bool_exp
}

"""Ordering options when selecting data from "events"."""
input events_order_by {
  associations_aggregate: associations_aggregate_order_by
  children_aggregate: events_aggregate_order_by
  computed_cost_time: order_by
  cost_money: order_by
  cost_time: order_by
  end_time: order_by
  event_type: order_by
  event_type_object: event_types_order_by
  id: order_by
  interaction: interactions_order_by
  interaction_id: order_by
  locations_aggregate: locations_aggregate_order_by
  logs: order_by
  metadata: order_by
  objects_aggregate: objects_aggregate_order_by
  parent: events_order_by
  parent_id: order_by
  start_time: order_by
  status: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: events"""
input events_pk_columns_input {
  id: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input events_prepend_input {
  logs: jsonb
  metadata: jsonb
}

"""
select columns of table "events"
"""
enum events_select_column {
  """column name"""
  cost_money

  """column name"""
  cost_time

  """column name"""
  end_time

  """column name"""
  event_type

  """column name"""
  id

  """column name"""
  interaction_id

  """column name"""
  logs

  """column name"""
  metadata

  """column name"""
  parent_id

  """column name"""
  start_time

  """column name"""
  status

  """column name"""
  user_id
}

"""
input type for updating data in table "events"
"""
input events_set_input {
  """cents"""
  cost_money: Int

  """seconds"""
  cost_time: Int
  end_time: timestamp
  event_type: String
  id: Int
  interaction_id: Int
  logs: jsonb
  metadata: jsonb
  parent_id: Int
  start_time: timestamp
  status: String
  user_id: Int
}

"""aggregate stddev on columns"""
type events_stddev_fields {
  """
  A computed field, executes function "event_duration"
  """
  computed_cost_time: Int

  """cents"""
  cost_money: Float

  """seconds"""
  cost_time: Float
  id: Float
  interaction_id: Float
  parent_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "events"
"""
input events_stddev_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type events_stddev_pop_fields {
  """
  A computed field, executes function "event_duration"
  """
  computed_cost_time: Int

  """cents"""
  cost_money: Float

  """seconds"""
  cost_time: Float
  id: Float
  interaction_id: Float
  parent_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "events"
"""
input events_stddev_pop_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type events_stddev_samp_fields {
  """
  A computed field, executes function "event_duration"
  """
  computed_cost_time: Int

  """cents"""
  cost_money: Float

  """seconds"""
  cost_time: Float
  id: Float
  interaction_id: Float
  parent_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "events"
"""
input events_stddev_samp_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "events"
"""
input events_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: events_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input events_stream_cursor_value_input {
  """cents"""
  cost_money: Int

  """seconds"""
  cost_time: Int
  end_time: timestamp
  event_type: String
  id: Int
  interaction_id: Int
  logs: jsonb
  metadata: jsonb
  parent_id: Int
  start_time: timestamp
  status: String
  user_id: Int
}

"""aggregate sum on columns"""
type events_sum_fields {
  """
  A computed field, executes function "event_duration"
  """
  computed_cost_time: Int

  """cents"""
  cost_money: Int

  """seconds"""
  cost_time: Int
  id: Int
  interaction_id: Int
  parent_id: Int
  user_id: Int
}

"""
order by sum() on columns of table "events"
"""
input events_sum_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  user_id: order_by
}

"""
update columns of table "events"
"""
enum events_update_column {
  """column name"""
  cost_money

  """column name"""
  cost_time

  """column name"""
  end_time

  """column name"""
  event_type

  """column name"""
  id

  """column name"""
  interaction_id

  """column name"""
  logs

  """column name"""
  metadata

  """column name"""
  parent_id

  """column name"""
  start_time

  """column name"""
  status

  """column name"""
  user_id
}

input events_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: events_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: events_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _delete_elem: events_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: events_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: events_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: events_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: events_set_input

  """filter the rows which have to be updated"""
  where: events_bool_exp!
}

"""aggregate var_pop on columns"""
type events_var_pop_fields {
  """
  A computed field, executes function "event_duration"
  """
  computed_cost_time: Int

  """cents"""
  cost_money: Float

  """seconds"""
  cost_time: Float
  id: Float
  interaction_id: Float
  parent_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "events"
"""
input events_var_pop_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type events_var_samp_fields {
  """
  A computed field, executes function "event_duration"
  """
  computed_cost_time: Int

  """cents"""
  cost_money: Float

  """seconds"""
  cost_time: Float
  id: Float
  interaction_id: Float
  parent_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "events"
"""
input events_var_samp_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type events_variance_fields {
  """
  A computed field, executes function "event_duration"
  """
  computed_cost_time: Int

  """cents"""
  cost_money: Float

  """seconds"""
  cost_time: Float
  id: Float
  interaction_id: Float
  parent_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "events"
"""
input events_variance_order_by {
  """cents"""
  cost_money: order_by

  """seconds"""
  cost_time: order_by
  id: order_by
  interaction_id: order_by
  parent_id: order_by
  user_id: order_by
}

input fetch_associations_args {
  from_row_id: Int
  from_row_type: String
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

scalar geography

input geography_cast_exp {
  geometry: geometry_comparison_exp
}

"""
Boolean expression to compare columns of type "geography". All fields are combined with logical 'AND'.
"""
input geography_comparison_exp {
  _cast: geography_cast_exp
  _eq: geography
  _gt: geography
  _gte: geography
  _in: [geography!]
  _is_null: Boolean
  _lt: geography
  _lte: geography
  _neq: geography
  _nin: [geography!]

  """is the column within a given distance from the given geography value"""
  _st_d_within: st_d_within_geography_input

  """does the column spatially intersect the given geography value"""
  _st_intersects: geography
}

scalar geometry

input geometry_cast_exp {
  geography: geography_comparison_exp
}

"""
Boolean expression to compare columns of type "geometry". All fields are combined with logical 'AND'.
"""
input geometry_comparison_exp {
  _cast: geometry_cast_exp
  _eq: geometry
  _gt: geometry
  _gte: geometry
  _in: [geometry!]
  _is_null: Boolean
  _lt: geometry
  _lte: geometry
  _neq: geometry
  _nin: [geometry!]

  """is the column within a given 3D distance from the given geometry value"""
  _st_3d_d_within: st_d_within_input

  """does the column spatially intersect the given geometry value in 3D"""
  _st_3d_intersects: geometry

  """does the column contain the given geometry value"""
  _st_contains: geometry

  """does the column cross the given geometry value"""
  _st_crosses: geometry

  """is the column within a given distance from the given geometry value"""
  _st_d_within: st_d_within_input

  """
  is the column equal to given geometry value (directionality is ignored)
  """
  _st_equals: geometry

  """does the column spatially intersect the given geometry value"""
  _st_intersects: geometry

  """
  does the column 'spatially overlap' (intersect but not completely contain) the given geometry value
  """
  _st_overlaps: geometry

  """
  does the column have atleast one point in common with the given geometry value
  """
  _st_touches: geometry

  """is the column contained in the given geometry value"""
  _st_within: geometry
}

"""
columns and relationships of "goals"
"""
type goals {
  created: timestamptz!
  frequency(
    """JSON select path"""
    path: String
  ): jsonb
  id: Int!
  name: String!
  nl_description: String!
  status: String!

  """An object relationship"""
  todo: todos

  """An object relationship"""
  user: users!
  user_id: Int!
}

"""
aggregated selection of "goals"
"""
type goals_aggregate {
  aggregate: goals_aggregate_fields
  nodes: [goals!]!
}

"""
aggregate fields of "goals"
"""
type goals_aggregate_fields {
  avg: goals_avg_fields
  count(columns: [goals_select_column!], distinct: Boolean): Int!
  max: goals_max_fields
  min: goals_min_fields
  stddev: goals_stddev_fields
  stddev_pop: goals_stddev_pop_fields
  stddev_samp: goals_stddev_samp_fields
  sum: goals_sum_fields
  var_pop: goals_var_pop_fields
  var_samp: goals_var_samp_fields
  variance: goals_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input goals_append_input {
  frequency: jsonb
}

"""aggregate avg on columns"""
type goals_avg_fields {
  id: Float
  user_id: Float
}

"""
Boolean expression to filter rows from the table "goals". All fields are combined with a logical 'AND'.
"""
input goals_bool_exp {
  _and: [goals_bool_exp!]
  _not: goals_bool_exp
  _or: [goals_bool_exp!]
  created: timestamptz_comparison_exp
  frequency: jsonb_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  nl_description: String_comparison_exp
  status: String_comparison_exp
  todo: todos_bool_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "goals"
"""
enum goals_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  goal_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input goals_delete_at_path_input {
  frequency: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input goals_delete_elem_input {
  frequency: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input goals_delete_key_input {
  frequency: String
}

"""
input type for incrementing numeric columns in table "goals"
"""
input goals_inc_input {
  id: Int
  user_id: Int
}

"""
input type for inserting data into table "goals"
"""
input goals_insert_input {
  created: timestamptz
  frequency: jsonb
  id: Int
  name: String
  nl_description: String
  status: String
  todo: todos_obj_rel_insert_input
  user: users_obj_rel_insert_input
  user_id: Int
}

"""aggregate max on columns"""
type goals_max_fields {
  created: timestamptz
  id: Int
  name: String
  nl_description: String
  status: String
  user_id: Int
}

"""aggregate min on columns"""
type goals_min_fields {
  created: timestamptz
  id: Int
  name: String
  nl_description: String
  status: String
  user_id: Int
}

"""
response of any mutation on the table "goals"
"""
type goals_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [goals!]!
}

"""
input type for inserting object relation for remote table "goals"
"""
input goals_obj_rel_insert_input {
  data: goals_insert_input!

  """upsert condition"""
  on_conflict: goals_on_conflict
}

"""
on_conflict condition type for table "goals"
"""
input goals_on_conflict {
  constraint: goals_constraint!
  update_columns: [goals_update_column!]! = []
  where: goals_bool_exp
}

"""Ordering options when selecting data from "goals"."""
input goals_order_by {
  created: order_by
  frequency: order_by
  id: order_by
  name: order_by
  nl_description: order_by
  status: order_by
  todo: todos_order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: goals"""
input goals_pk_columns_input {
  id: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input goals_prepend_input {
  frequency: jsonb
}

"""
select columns of table "goals"
"""
enum goals_select_column {
  """column name"""
  created

  """column name"""
  frequency

  """column name"""
  id

  """column name"""
  name

  """column name"""
  nl_description

  """column name"""
  status

  """column name"""
  user_id
}

"""
input type for updating data in table "goals"
"""
input goals_set_input {
  created: timestamptz
  frequency: jsonb
  id: Int
  name: String
  nl_description: String
  status: String
  user_id: Int
}

"""aggregate stddev on columns"""
type goals_stddev_fields {
  id: Float
  user_id: Float
}

"""aggregate stddev_pop on columns"""
type goals_stddev_pop_fields {
  id: Float
  user_id: Float
}

"""aggregate stddev_samp on columns"""
type goals_stddev_samp_fields {
  id: Float
  user_id: Float
}

"""
Streaming cursor of the table "goals"
"""
input goals_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: goals_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input goals_stream_cursor_value_input {
  created: timestamptz
  frequency: jsonb
  id: Int
  name: String
  nl_description: String
  status: String
  user_id: Int
}

"""aggregate sum on columns"""
type goals_sum_fields {
  id: Int
  user_id: Int
}

"""
update columns of table "goals"
"""
enum goals_update_column {
  """column name"""
  created

  """column name"""
  frequency

  """column name"""
  id

  """column name"""
  name

  """column name"""
  nl_description

  """column name"""
  status

  """column name"""
  user_id
}

input goals_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: goals_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: goals_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _delete_elem: goals_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: goals_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: goals_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: goals_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: goals_set_input

  """filter the rows which have to be updated"""
  where: goals_bool_exp!
}

"""aggregate var_pop on columns"""
type goals_var_pop_fields {
  id: Float
  user_id: Float
}

"""aggregate var_samp on columns"""
type goals_var_samp_fields {
  id: Float
  user_id: Float
}

"""aggregate variance on columns"""
type goals_variance_fields {
  id: Float
  user_id: Float
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "interactions"
"""
type interactions {
  content: String!
  content_type: String
  debug(
    """JSON select path"""
    path: String
  ): jsonb
  embedding: vector!

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!

  """An aggregate relationship"""
  events_aggregate(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): events_aggregate!
  id: Int!
  match_score: float8!
  timestamp: timestamptz
  transcode_version: Int!
  user_id: Int!
}

"""
aggregated selection of "interactions"
"""
type interactions_aggregate {
  aggregate: interactions_aggregate_fields
  nodes: [interactions!]!
}

"""
aggregate fields of "interactions"
"""
type interactions_aggregate_fields {
  avg: interactions_avg_fields
  count(columns: [interactions_select_column!], distinct: Boolean): Int!
  max: interactions_max_fields
  min: interactions_min_fields
  stddev: interactions_stddev_fields
  stddev_pop: interactions_stddev_pop_fields
  stddev_samp: interactions_stddev_samp_fields
  sum: interactions_sum_fields
  var_pop: interactions_var_pop_fields
  var_samp: interactions_var_samp_fields
  variance: interactions_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input interactions_append_input {
  debug: jsonb
}

"""aggregate avg on columns"""
type interactions_avg_fields {
  id: Float
  match_score: Float
  transcode_version: Float
  user_id: Float
}

"""
Boolean expression to filter rows from the table "interactions". All fields are combined with a logical 'AND'.
"""
input interactions_bool_exp {
  _and: [interactions_bool_exp!]
  _not: interactions_bool_exp
  _or: [interactions_bool_exp!]
  content: String_comparison_exp
  content_type: String_comparison_exp
  debug: jsonb_comparison_exp
  embedding: vector_comparison_exp
  events: events_bool_exp
  events_aggregate: events_aggregate_bool_exp
  id: Int_comparison_exp
  match_score: float8_comparison_exp
  timestamp: timestamptz_comparison_exp
  transcode_version: Int_comparison_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "interactions"
"""
enum interactions_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  interactions_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input interactions_delete_at_path_input {
  debug: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input interactions_delete_elem_input {
  debug: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input interactions_delete_key_input {
  debug: String
}

"""
input type for incrementing numeric columns in table "interactions"
"""
input interactions_inc_input {
  id: Int
  match_score: float8
  transcode_version: Int
  user_id: Int
}

"""
input type for inserting data into table "interactions"
"""
input interactions_insert_input {
  content: String
  content_type: String
  debug: jsonb
  embedding: vector
  events: events_arr_rel_insert_input
  id: Int
  match_score: float8
  timestamp: timestamptz
  transcode_version: Int
  user_id: Int
}

"""aggregate max on columns"""
type interactions_max_fields {
  content: String
  content_type: String
  id: Int
  match_score: float8
  timestamp: timestamptz
  transcode_version: Int
  user_id: Int
}

"""aggregate min on columns"""
type interactions_min_fields {
  content: String
  content_type: String
  id: Int
  match_score: float8
  timestamp: timestamptz
  transcode_version: Int
  user_id: Int
}

"""
response of any mutation on the table "interactions"
"""
type interactions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [interactions!]!
}

"""
input type for inserting object relation for remote table "interactions"
"""
input interactions_obj_rel_insert_input {
  data: interactions_insert_input!

  """upsert condition"""
  on_conflict: interactions_on_conflict
}

"""
on_conflict condition type for table "interactions"
"""
input interactions_on_conflict {
  constraint: interactions_constraint!
  update_columns: [interactions_update_column!]! = []
  where: interactions_bool_exp
}

"""Ordering options when selecting data from "interactions"."""
input interactions_order_by {
  content: order_by
  content_type: order_by
  debug: order_by
  embedding: order_by
  events_aggregate: events_aggregate_order_by
  id: order_by
  match_score: order_by
  timestamp: order_by
  transcode_version: order_by
  user_id: order_by
}

"""primary key columns input for table: interactions"""
input interactions_pk_columns_input {
  id: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input interactions_prepend_input {
  debug: jsonb
}

"""
select columns of table "interactions"
"""
enum interactions_select_column {
  """column name"""
  content

  """column name"""
  content_type

  """column name"""
  debug

  """column name"""
  embedding

  """column name"""
  id

  """column name"""
  match_score

  """column name"""
  timestamp

  """column name"""
  transcode_version

  """column name"""
  user_id
}

"""
input type for updating data in table "interactions"
"""
input interactions_set_input {
  content: String
  content_type: String
  debug: jsonb
  embedding: vector
  id: Int
  match_score: float8
  timestamp: timestamptz
  transcode_version: Int
  user_id: Int
}

"""aggregate stddev on columns"""
type interactions_stddev_fields {
  id: Float
  match_score: Float
  transcode_version: Float
  user_id: Float
}

"""aggregate stddev_pop on columns"""
type interactions_stddev_pop_fields {
  id: Float
  match_score: Float
  transcode_version: Float
  user_id: Float
}

"""aggregate stddev_samp on columns"""
type interactions_stddev_samp_fields {
  id: Float
  match_score: Float
  transcode_version: Float
  user_id: Float
}

"""
Streaming cursor of the table "interactions"
"""
input interactions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: interactions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input interactions_stream_cursor_value_input {
  content: String
  content_type: String
  debug: jsonb
  embedding: vector
  id: Int
  match_score: float8
  timestamp: timestamptz
  transcode_version: Int
  user_id: Int
}

"""aggregate sum on columns"""
type interactions_sum_fields {
  id: Int
  match_score: float8
  transcode_version: Int
  user_id: Int
}

"""
update columns of table "interactions"
"""
enum interactions_update_column {
  """column name"""
  content

  """column name"""
  content_type

  """column name"""
  debug

  """column name"""
  embedding

  """column name"""
  id

  """column name"""
  match_score

  """column name"""
  timestamp

  """column name"""
  transcode_version

  """column name"""
  user_id
}

input interactions_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: interactions_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: interactions_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _delete_elem: interactions_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: interactions_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: interactions_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: interactions_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: interactions_set_input

  """filter the rows which have to be updated"""
  where: interactions_bool_exp!
}

"""aggregate var_pop on columns"""
type interactions_var_pop_fields {
  id: Float
  match_score: Float
  transcode_version: Float
  user_id: Float
}

"""aggregate var_samp on columns"""
type interactions_var_samp_fields {
  id: Float
  match_score: Float
  transcode_version: Float
  user_id: Float
}

"""aggregate variance on columns"""
type interactions_variance_fields {
  id: Float
  match_score: Float
  transcode_version: Float
  user_id: Float
}

scalar jsonb

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_array_comparison_exp {
  """is the array contained in the given array value"""
  _contained_in: [jsonb!]

  """does the array contain the given value"""
  _contains: [jsonb!]
  _eq: [jsonb!]
  _gt: [jsonb!]
  _gte: [jsonb!]
  _in: [[jsonb!]!]
  _is_null: Boolean
  _lt: [jsonb!]
  _lte: [jsonb!]
  _neq: [jsonb!]
  _nin: [[jsonb!]!]
}

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "locations"
"""
type locations {
  """
  A computed field, executes function "location_events"
  """
  events(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]
  id: Int!
  location: geography!
  name: String
  user_id: Int!
}

"""
aggregated selection of "locations"
"""
type locations_aggregate {
  aggregate: locations_aggregate_fields
  nodes: [locations!]!
}

input locations_aggregate_bool_exp {
  count: locations_aggregate_bool_exp_count
}

input locations_aggregate_bool_exp_count {
  arguments: [locations_select_column!]
  distinct: Boolean
  filter: locations_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "locations"
"""
type locations_aggregate_fields {
  avg: locations_avg_fields
  count(columns: [locations_select_column!], distinct: Boolean): Int!
  max: locations_max_fields
  min: locations_min_fields
  stddev: locations_stddev_fields
  stddev_pop: locations_stddev_pop_fields
  stddev_samp: locations_stddev_samp_fields
  sum: locations_sum_fields
  var_pop: locations_var_pop_fields
  var_samp: locations_var_samp_fields
  variance: locations_variance_fields
}

"""
order by aggregate values of table "locations"
"""
input locations_aggregate_order_by {
  avg: locations_avg_order_by
  count: order_by
  max: locations_max_order_by
  min: locations_min_order_by
  stddev: locations_stddev_order_by
  stddev_pop: locations_stddev_pop_order_by
  stddev_samp: locations_stddev_samp_order_by
  sum: locations_sum_order_by
  var_pop: locations_var_pop_order_by
  var_samp: locations_var_samp_order_by
  variance: locations_variance_order_by
}

"""
input type for inserting array relation for remote table "locations"
"""
input locations_arr_rel_insert_input {
  data: [locations_insert_input!]!

  """upsert condition"""
  on_conflict: locations_on_conflict
}

"""aggregate avg on columns"""
type locations_avg_fields {
  id: Float
  user_id: Float
}

"""
order by avg() on columns of table "locations"
"""
input locations_avg_order_by {
  id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "locations". All fields are combined with a logical 'AND'.
"""
input locations_bool_exp {
  _and: [locations_bool_exp!]
  _not: locations_bool_exp
  _or: [locations_bool_exp!]
  events: events_bool_exp
  id: Int_comparison_exp
  location: geography_comparison_exp
  name: String_comparison_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "locations"
"""
enum locations_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  locations_id_key

  """
  unique or primary key constraint on columns "id"
  """
  locations_pkey
}

"""
input type for incrementing numeric columns in table "locations"
"""
input locations_inc_input {
  id: Int
  user_id: Int
}

"""
input type for inserting data into table "locations"
"""
input locations_insert_input {
  id: Int
  location: geography
  name: String
  user_id: Int
}

"""aggregate max on columns"""
type locations_max_fields {
  id: Int
  name: String
  user_id: Int
}

"""
order by max() on columns of table "locations"
"""
input locations_max_order_by {
  id: order_by
  name: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type locations_min_fields {
  id: Int
  name: String
  user_id: Int
}

"""
order by min() on columns of table "locations"
"""
input locations_min_order_by {
  id: order_by
  name: order_by
  user_id: order_by
}

"""
response of any mutation on the table "locations"
"""
type locations_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [locations!]!
}

"""
on_conflict condition type for table "locations"
"""
input locations_on_conflict {
  constraint: locations_constraint!
  update_columns: [locations_update_column!]! = []
  where: locations_bool_exp
}

"""Ordering options when selecting data from "locations"."""
input locations_order_by {
  events_aggregate: events_aggregate_order_by
  id: order_by
  location: order_by
  name: order_by
  user_id: order_by
}

"""primary key columns input for table: locations"""
input locations_pk_columns_input {
  id: Int!
}

"""
select columns of table "locations"
"""
enum locations_select_column {
  """column name"""
  id

  """column name"""
  location

  """column name"""
  name

  """column name"""
  user_id
}

"""
input type for updating data in table "locations"
"""
input locations_set_input {
  id: Int
  location: geography
  name: String
  user_id: Int
}

"""aggregate stddev on columns"""
type locations_stddev_fields {
  id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "locations"
"""
input locations_stddev_order_by {
  id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type locations_stddev_pop_fields {
  id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "locations"
"""
input locations_stddev_pop_order_by {
  id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type locations_stddev_samp_fields {
  id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "locations"
"""
input locations_stddev_samp_order_by {
  id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "locations"
"""
input locations_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: locations_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input locations_stream_cursor_value_input {
  id: Int
  location: geography
  name: String
  user_id: Int
}

"""aggregate sum on columns"""
type locations_sum_fields {
  id: Int
  user_id: Int
}

"""
order by sum() on columns of table "locations"
"""
input locations_sum_order_by {
  id: order_by
  user_id: order_by
}

"""
update columns of table "locations"
"""
enum locations_update_column {
  """column name"""
  id

  """column name"""
  location

  """column name"""
  name

  """column name"""
  user_id
}

input locations_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: locations_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: locations_set_input

  """filter the rows which have to be updated"""
  where: locations_bool_exp!
}

"""aggregate var_pop on columns"""
type locations_var_pop_fields {
  id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "locations"
"""
input locations_var_pop_order_by {
  id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type locations_var_samp_fields {
  id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "locations"
"""
input locations_var_samp_order_by {
  id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type locations_variance_fields {
  id: Float
  user_id: Float
}

"""
order by variance() on columns of table "locations"
"""
input locations_variance_order_by {
  id: order_by
  user_id: order_by
}

input match_interactions_args {
  match_threshold: float8
  query_embedding: vector
  target_user_id: Int
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "associations"
  """
  delete_associations(
    """filter the rows which have to be deleted"""
    where: associations_bool_exp!
  ): associations_mutation_response

  """
  delete single row from the table: "associations"
  """
  delete_associations_by_pk(id: Int!): associations

  """
  delete data from the table: "event_types"
  """
  delete_event_types(
    """filter the rows which have to be deleted"""
    where: event_types_bool_exp!
  ): event_types_mutation_response

  """
  delete single row from the table: "event_types"
  """
  delete_event_types_by_pk(name: String!): event_types

  """
  delete data from the table: "events"
  """
  delete_events(
    """filter the rows which have to be deleted"""
    where: events_bool_exp!
  ): events_mutation_response

  """
  delete single row from the table: "events"
  """
  delete_events_by_pk(id: Int!): events

  """
  delete data from the table: "goals"
  """
  delete_goals(
    """filter the rows which have to be deleted"""
    where: goals_bool_exp!
  ): goals_mutation_response

  """
  delete single row from the table: "goals"
  """
  delete_goals_by_pk(id: Int!): goals

  """
  delete data from the table: "interactions"
  """
  delete_interactions(
    """filter the rows which have to be deleted"""
    where: interactions_bool_exp!
  ): interactions_mutation_response

  """
  delete single row from the table: "interactions"
  """
  delete_interactions_by_pk(id: Int!): interactions

  """
  delete data from the table: "locations"
  """
  delete_locations(
    """filter the rows which have to be deleted"""
    where: locations_bool_exp!
  ): locations_mutation_response

  """
  delete single row from the table: "locations"
  """
  delete_locations_by_pk(id: Int!): locations

  """
  delete data from the table: "object_types"
  """
  delete_object_types(
    """filter the rows which have to be deleted"""
    where: object_types_bool_exp!
  ): object_types_mutation_response

  """
  delete single row from the table: "object_types"
  """
  delete_object_types_by_pk(id: String!): object_types

  """
  delete data from the table: "objects"
  """
  delete_objects(
    """filter the rows which have to be deleted"""
    where: objects_bool_exp!
  ): objects_mutation_response

  """
  delete single row from the table: "objects"
  """
  delete_objects_by_pk(id: Int!): objects

  """
  delete data from the table: "todos"
  """
  delete_todos(
    """filter the rows which have to be deleted"""
    where: todos_bool_exp!
  ): todos_mutation_response

  """
  delete single row from the table: "todos"
  """
  delete_todos_by_pk(id: Int!): todos

  """
  delete data from the table: "user_movements"
  """
  delete_user_movements(
    """filter the rows which have to be deleted"""
    where: user_movements_bool_exp!
  ): user_movements_mutation_response

  """
  delete single row from the table: "user_movements"
  """
  delete_user_movements_by_pk(id: Int!): user_movements

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: Int!): users

  """
  insert data into the table: "associations"
  """
  insert_associations(
    """the rows to be inserted"""
    objects: [associations_insert_input!]!

    """upsert condition"""
    on_conflict: associations_on_conflict
  ): associations_mutation_response

  """
  insert a single row into the table: "associations"
  """
  insert_associations_one(
    """the row to be inserted"""
    object: associations_insert_input!

    """upsert condition"""
    on_conflict: associations_on_conflict
  ): associations

  """
  insert data into the table: "event_types"
  """
  insert_event_types(
    """the rows to be inserted"""
    objects: [event_types_insert_input!]!

    """upsert condition"""
    on_conflict: event_types_on_conflict
  ): event_types_mutation_response

  """
  insert a single row into the table: "event_types"
  """
  insert_event_types_one(
    """the row to be inserted"""
    object: event_types_insert_input!

    """upsert condition"""
    on_conflict: event_types_on_conflict
  ): event_types

  """
  insert data into the table: "events"
  """
  insert_events(
    """the rows to be inserted"""
    objects: [events_insert_input!]!

    """upsert condition"""
    on_conflict: events_on_conflict
  ): events_mutation_response

  """
  insert a single row into the table: "events"
  """
  insert_events_one(
    """the row to be inserted"""
    object: events_insert_input!

    """upsert condition"""
    on_conflict: events_on_conflict
  ): events

  """
  insert data into the table: "goals"
  """
  insert_goals(
    """the rows to be inserted"""
    objects: [goals_insert_input!]!

    """upsert condition"""
    on_conflict: goals_on_conflict
  ): goals_mutation_response

  """
  insert a single row into the table: "goals"
  """
  insert_goals_one(
    """the row to be inserted"""
    object: goals_insert_input!

    """upsert condition"""
    on_conflict: goals_on_conflict
  ): goals

  """
  insert data into the table: "interactions"
  """
  insert_interactions(
    """the rows to be inserted"""
    objects: [interactions_insert_input!]!

    """upsert condition"""
    on_conflict: interactions_on_conflict
  ): interactions_mutation_response

  """
  insert a single row into the table: "interactions"
  """
  insert_interactions_one(
    """the row to be inserted"""
    object: interactions_insert_input!

    """upsert condition"""
    on_conflict: interactions_on_conflict
  ): interactions

  """
  insert data into the table: "locations"
  """
  insert_locations(
    """the rows to be inserted"""
    objects: [locations_insert_input!]!

    """upsert condition"""
    on_conflict: locations_on_conflict
  ): locations_mutation_response

  """
  insert a single row into the table: "locations"
  """
  insert_locations_one(
    """the row to be inserted"""
    object: locations_insert_input!

    """upsert condition"""
    on_conflict: locations_on_conflict
  ): locations

  """
  insert data into the table: "object_types"
  """
  insert_object_types(
    """the rows to be inserted"""
    objects: [object_types_insert_input!]!

    """upsert condition"""
    on_conflict: object_types_on_conflict
  ): object_types_mutation_response

  """
  insert a single row into the table: "object_types"
  """
  insert_object_types_one(
    """the row to be inserted"""
    object: object_types_insert_input!

    """upsert condition"""
    on_conflict: object_types_on_conflict
  ): object_types

  """
  insert data into the table: "objects"
  """
  insert_objects(
    """the rows to be inserted"""
    objects: [objects_insert_input!]!

    """upsert condition"""
    on_conflict: objects_on_conflict
  ): objects_mutation_response

  """
  insert a single row into the table: "objects"
  """
  insert_objects_one(
    """the row to be inserted"""
    object: objects_insert_input!

    """upsert condition"""
    on_conflict: objects_on_conflict
  ): objects

  """
  insert data into the table: "todos"
  """
  insert_todos(
    """the rows to be inserted"""
    objects: [todos_insert_input!]!

    """upsert condition"""
    on_conflict: todos_on_conflict
  ): todos_mutation_response

  """
  insert a single row into the table: "todos"
  """
  insert_todos_one(
    """the row to be inserted"""
    object: todos_insert_input!

    """upsert condition"""
    on_conflict: todos_on_conflict
  ): todos

  """
  insert data into the table: "user_movements"
  """
  insert_user_movements(
    """the rows to be inserted"""
    objects: [user_movements_insert_input!]!

    """upsert condition"""
    on_conflict: user_movements_on_conflict
  ): user_movements_mutation_response

  """
  insert a single row into the table: "user_movements"
  """
  insert_user_movements_one(
    """the row to be inserted"""
    object: user_movements_insert_input!

    """upsert condition"""
    on_conflict: user_movements_on_conflict
  ): user_movements

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "associations"
  """
  update_associations(
    """increments the numeric columns with given value of the filtered values"""
    _inc: associations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: associations_set_input

    """filter the rows which have to be updated"""
    where: associations_bool_exp!
  ): associations_mutation_response

  """
  update single row of the table: "associations"
  """
  update_associations_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: associations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: associations_set_input
    pk_columns: associations_pk_columns_input!
  ): associations

  """
  update multiples rows of table: "associations"
  """
  update_associations_many(
    """updates to execute, in order"""
    updates: [associations_updates!]!
  ): [associations_mutation_response]

  """
  update data of the table: "event_types"
  """
  update_event_types(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: event_types_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: event_types_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: event_types_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: event_types_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: event_types_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: event_types_set_input

    """filter the rows which have to be updated"""
    where: event_types_bool_exp!
  ): event_types_mutation_response

  """
  update single row of the table: "event_types"
  """
  update_event_types_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: event_types_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: event_types_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: event_types_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: event_types_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: event_types_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: event_types_set_input
    pk_columns: event_types_pk_columns_input!
  ): event_types

  """
  update multiples rows of table: "event_types"
  """
  update_event_types_many(
    """updates to execute, in order"""
    updates: [event_types_updates!]!
  ): [event_types_mutation_response]

  """
  update data of the table: "events"
  """
  update_events(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: events_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: events_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: events_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: events_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: events_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: events_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: events_set_input

    """filter the rows which have to be updated"""
    where: events_bool_exp!
  ): events_mutation_response

  """
  update single row of the table: "events"
  """
  update_events_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: events_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: events_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: events_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: events_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: events_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: events_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: events_set_input
    pk_columns: events_pk_columns_input!
  ): events

  """
  update multiples rows of table: "events"
  """
  update_events_many(
    """updates to execute, in order"""
    updates: [events_updates!]!
  ): [events_mutation_response]

  """
  update data of the table: "goals"
  """
  update_goals(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: goals_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: goals_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: goals_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: goals_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: goals_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: goals_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: goals_set_input

    """filter the rows which have to be updated"""
    where: goals_bool_exp!
  ): goals_mutation_response

  """
  update single row of the table: "goals"
  """
  update_goals_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: goals_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: goals_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: goals_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: goals_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: goals_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: goals_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: goals_set_input
    pk_columns: goals_pk_columns_input!
  ): goals

  """
  update multiples rows of table: "goals"
  """
  update_goals_many(
    """updates to execute, in order"""
    updates: [goals_updates!]!
  ): [goals_mutation_response]

  """
  update data of the table: "interactions"
  """
  update_interactions(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: interactions_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: interactions_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: interactions_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: interactions_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: interactions_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: interactions_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: interactions_set_input

    """filter the rows which have to be updated"""
    where: interactions_bool_exp!
  ): interactions_mutation_response

  """
  update single row of the table: "interactions"
  """
  update_interactions_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: interactions_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: interactions_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: interactions_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: interactions_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: interactions_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: interactions_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: interactions_set_input
    pk_columns: interactions_pk_columns_input!
  ): interactions

  """
  update multiples rows of table: "interactions"
  """
  update_interactions_many(
    """updates to execute, in order"""
    updates: [interactions_updates!]!
  ): [interactions_mutation_response]

  """
  update data of the table: "locations"
  """
  update_locations(
    """increments the numeric columns with given value of the filtered values"""
    _inc: locations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: locations_set_input

    """filter the rows which have to be updated"""
    where: locations_bool_exp!
  ): locations_mutation_response

  """
  update single row of the table: "locations"
  """
  update_locations_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: locations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: locations_set_input
    pk_columns: locations_pk_columns_input!
  ): locations

  """
  update multiples rows of table: "locations"
  """
  update_locations_many(
    """updates to execute, in order"""
    updates: [locations_updates!]!
  ): [locations_mutation_response]

  """
  update data of the table: "object_types"
  """
  update_object_types(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: object_types_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: object_types_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: object_types_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: object_types_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: object_types_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: object_types_set_input

    """filter the rows which have to be updated"""
    where: object_types_bool_exp!
  ): object_types_mutation_response

  """
  update single row of the table: "object_types"
  """
  update_object_types_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: object_types_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: object_types_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: object_types_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: object_types_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: object_types_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: object_types_set_input
    pk_columns: object_types_pk_columns_input!
  ): object_types

  """
  update multiples rows of table: "object_types"
  """
  update_object_types_many(
    """updates to execute, in order"""
    updates: [object_types_updates!]!
  ): [object_types_mutation_response]

  """
  update data of the table: "objects"
  """
  update_objects(
    """increments the numeric columns with given value of the filtered values"""
    _inc: objects_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: objects_set_input

    """filter the rows which have to be updated"""
    where: objects_bool_exp!
  ): objects_mutation_response

  """
  update single row of the table: "objects"
  """
  update_objects_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: objects_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: objects_set_input
    pk_columns: objects_pk_columns_input!
  ): objects

  """
  update multiples rows of table: "objects"
  """
  update_objects_many(
    """updates to execute, in order"""
    updates: [objects_updates!]!
  ): [objects_mutation_response]

  """
  update data of the table: "todos"
  """
  update_todos(
    """increments the numeric columns with given value of the filtered values"""
    _inc: todos_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: todos_set_input

    """filter the rows which have to be updated"""
    where: todos_bool_exp!
  ): todos_mutation_response

  """
  update single row of the table: "todos"
  """
  update_todos_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: todos_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: todos_set_input
    pk_columns: todos_pk_columns_input!
  ): todos

  """
  update multiples rows of table: "todos"
  """
  update_todos_many(
    """updates to execute, in order"""
    updates: [todos_updates!]!
  ): [todos_mutation_response]

  """
  update data of the table: "user_movements"
  """
  update_user_movements(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: user_movements_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: user_movements_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: user_movements_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: user_movements_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: user_movements_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: user_movements_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_movements_set_input

    """filter the rows which have to be updated"""
    where: user_movements_bool_exp!
  ): user_movements_mutation_response

  """
  update single row of the table: "user_movements"
  """
  update_user_movements_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: user_movements_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: user_movements_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: user_movements_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: user_movements_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: user_movements_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: user_movements_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_movements_set_input
    pk_columns: user_movements_pk_columns_input!
  ): user_movements

  """
  update multiples rows of table: "user_movements"
  """
  update_user_movements_many(
    """updates to execute, in order"""
    updates: [user_movements_updates!]!
  ): [user_movements_mutation_response]

  """
  update data of the table: "users"
  """
  update_users(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: users_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: users_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: users_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: users_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: users_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: users_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: users_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: users_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: users_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: users_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update multiples rows of table: "users"
  """
  update_users_many(
    """updates to execute, in order"""
    updates: [users_updates!]!
  ): [users_mutation_response]
}

"""
columns and relationships of "object_types"
"""
type object_types {
  id: String!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb!
}

"""
aggregated selection of "object_types"
"""
type object_types_aggregate {
  aggregate: object_types_aggregate_fields
  nodes: [object_types!]!
}

"""
aggregate fields of "object_types"
"""
type object_types_aggregate_fields {
  count(columns: [object_types_select_column!], distinct: Boolean): Int!
  max: object_types_max_fields
  min: object_types_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input object_types_append_input {
  metadata: jsonb
}

"""
Boolean expression to filter rows from the table "object_types". All fields are combined with a logical 'AND'.
"""
input object_types_bool_exp {
  _and: [object_types_bool_exp!]
  _not: object_types_bool_exp
  _or: [object_types_bool_exp!]
  id: String_comparison_exp
  metadata: jsonb_comparison_exp
}

"""
unique or primary key constraints on table "object_types"
"""
enum object_types_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  object_types_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input object_types_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input object_types_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input object_types_delete_key_input {
  metadata: String
}

"""
input type for inserting data into table "object_types"
"""
input object_types_insert_input {
  id: String
  metadata: jsonb
}

"""aggregate max on columns"""
type object_types_max_fields {
  id: String
}

"""aggregate min on columns"""
type object_types_min_fields {
  id: String
}

"""
response of any mutation on the table "object_types"
"""
type object_types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [object_types!]!
}

"""
on_conflict condition type for table "object_types"
"""
input object_types_on_conflict {
  constraint: object_types_constraint!
  update_columns: [object_types_update_column!]! = []
  where: object_types_bool_exp
}

"""Ordering options when selecting data from "object_types"."""
input object_types_order_by {
  id: order_by
  metadata: order_by
}

"""primary key columns input for table: object_types"""
input object_types_pk_columns_input {
  id: String!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input object_types_prepend_input {
  metadata: jsonb
}

"""
select columns of table "object_types"
"""
enum object_types_select_column {
  """column name"""
  id

  """column name"""
  metadata
}

"""
input type for updating data in table "object_types"
"""
input object_types_set_input {
  id: String
  metadata: jsonb
}

"""
Streaming cursor of the table "object_types"
"""
input object_types_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: object_types_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input object_types_stream_cursor_value_input {
  id: String
  metadata: jsonb
}

"""
update columns of table "object_types"
"""
enum object_types_update_column {
  """column name"""
  id

  """column name"""
  metadata
}

input object_types_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: object_types_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: object_types_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _delete_elem: object_types_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: object_types_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: object_types_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: object_types_set_input

  """filter the rows which have to be updated"""
  where: object_types_bool_exp!
}

"""
columns and relationships of "objects"
"""
type objects {
  """
  A computed field, executes function "object_events"
  """
  events(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]
  id: Int!
  name: String!
  object_type: String!
  user_id: Int!
}

"""
aggregated selection of "objects"
"""
type objects_aggregate {
  aggregate: objects_aggregate_fields
  nodes: [objects!]!
}

"""
aggregate fields of "objects"
"""
type objects_aggregate_fields {
  avg: objects_avg_fields
  count(columns: [objects_select_column!], distinct: Boolean): Int!
  max: objects_max_fields
  min: objects_min_fields
  stddev: objects_stddev_fields
  stddev_pop: objects_stddev_pop_fields
  stddev_samp: objects_stddev_samp_fields
  sum: objects_sum_fields
  var_pop: objects_var_pop_fields
  var_samp: objects_var_samp_fields
  variance: objects_variance_fields
}

"""
order by aggregate values of table "objects"
"""
input objects_aggregate_order_by {
  avg: objects_avg_order_by
  count: order_by
  max: objects_max_order_by
  min: objects_min_order_by
  stddev: objects_stddev_order_by
  stddev_pop: objects_stddev_pop_order_by
  stddev_samp: objects_stddev_samp_order_by
  sum: objects_sum_order_by
  var_pop: objects_var_pop_order_by
  var_samp: objects_var_samp_order_by
  variance: objects_variance_order_by
}

"""aggregate avg on columns"""
type objects_avg_fields {
  id: Float
  user_id: Float
}

"""
order by avg() on columns of table "objects"
"""
input objects_avg_order_by {
  id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "objects". All fields are combined with a logical 'AND'.
"""
input objects_bool_exp {
  _and: [objects_bool_exp!]
  _not: objects_bool_exp
  _or: [objects_bool_exp!]
  events: events_bool_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  object_type: String_comparison_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "objects"
"""
enum objects_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  objects_pkey
}

"""
input type for incrementing numeric columns in table "objects"
"""
input objects_inc_input {
  id: Int
  user_id: Int
}

"""
input type for inserting data into table "objects"
"""
input objects_insert_input {
  id: Int
  name: String
  object_type: String
  user_id: Int
}

"""aggregate max on columns"""
type objects_max_fields {
  id: Int
  name: String
  object_type: String
  user_id: Int
}

"""
order by max() on columns of table "objects"
"""
input objects_max_order_by {
  id: order_by
  name: order_by
  object_type: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type objects_min_fields {
  id: Int
  name: String
  object_type: String
  user_id: Int
}

"""
order by min() on columns of table "objects"
"""
input objects_min_order_by {
  id: order_by
  name: order_by
  object_type: order_by
  user_id: order_by
}

"""
response of any mutation on the table "objects"
"""
type objects_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [objects!]!
}

"""
on_conflict condition type for table "objects"
"""
input objects_on_conflict {
  constraint: objects_constraint!
  update_columns: [objects_update_column!]! = []
  where: objects_bool_exp
}

"""Ordering options when selecting data from "objects"."""
input objects_order_by {
  events_aggregate: events_aggregate_order_by
  id: order_by
  name: order_by
  object_type: order_by
  user_id: order_by
}

"""primary key columns input for table: objects"""
input objects_pk_columns_input {
  id: Int!
}

"""
select columns of table "objects"
"""
enum objects_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  object_type

  """column name"""
  user_id
}

"""
input type for updating data in table "objects"
"""
input objects_set_input {
  id: Int
  name: String
  object_type: String
  user_id: Int
}

"""aggregate stddev on columns"""
type objects_stddev_fields {
  id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "objects"
"""
input objects_stddev_order_by {
  id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type objects_stddev_pop_fields {
  id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "objects"
"""
input objects_stddev_pop_order_by {
  id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type objects_stddev_samp_fields {
  id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "objects"
"""
input objects_stddev_samp_order_by {
  id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "objects"
"""
input objects_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: objects_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input objects_stream_cursor_value_input {
  id: Int
  name: String
  object_type: String
  user_id: Int
}

"""aggregate sum on columns"""
type objects_sum_fields {
  id: Int
  user_id: Int
}

"""
order by sum() on columns of table "objects"
"""
input objects_sum_order_by {
  id: order_by
  user_id: order_by
}

"""
update columns of table "objects"
"""
enum objects_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  object_type

  """column name"""
  user_id
}

input objects_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: objects_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: objects_set_input

  """filter the rows which have to be updated"""
  where: objects_bool_exp!
}

"""aggregate var_pop on columns"""
type objects_var_pop_fields {
  id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "objects"
"""
input objects_var_pop_order_by {
  id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type objects_var_samp_fields {
  id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "objects"
"""
input objects_var_samp_order_by {
  id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type objects_variance_fields {
  id: Float
  user_id: Float
}

"""
order by variance() on columns of table "objects"
"""
input objects_variance_order_by {
  id: order_by
  user_id: order_by
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "associations"
  """
  associations(
    """distinct select on columns"""
    distinct_on: [associations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [associations_order_by!]

    """filter the rows returned"""
    where: associations_bool_exp
  ): [associations!]!

  """
  fetch aggregated fields from the table: "associations"
  """
  associations_aggregate(
    """distinct select on columns"""
    distinct_on: [associations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [associations_order_by!]

    """filter the rows returned"""
    where: associations_bool_exp
  ): associations_aggregate!

  """fetch data from the table: "associations" using primary key columns"""
  associations_by_pk(id: Int!): associations

  """
  execute function "closest_user_location" which returns "locations"
  """
  closest_user_location(
    """
    input parameters for function "closest_user_location"
    """
    args: closest_user_location_args!

    """distinct select on columns"""
    distinct_on: [locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [locations_order_by!]

    """filter the rows returned"""
    where: locations_bool_exp
  ): [locations!]!

  """
  execute function "closest_user_location" and query aggregates on result of table type "locations"
  """
  closest_user_location_aggregate(
    """
    input parameters for function "closest_user_location_aggregate"
    """
    args: closest_user_location_args!

    """distinct select on columns"""
    distinct_on: [locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [locations_order_by!]

    """filter the rows returned"""
    where: locations_bool_exp
  ): locations_aggregate!

  """
  fetch data from the table: "event_types"
  """
  event_types(
    """distinct select on columns"""
    distinct_on: [event_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_types_order_by!]

    """filter the rows returned"""
    where: event_types_bool_exp
  ): [event_types!]!

  """
  fetch aggregated fields from the table: "event_types"
  """
  event_types_aggregate(
    """distinct select on columns"""
    distinct_on: [event_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_types_order_by!]

    """filter the rows returned"""
    where: event_types_bool_exp
  ): event_types_aggregate!

  """fetch data from the table: "event_types" using primary key columns"""
  event_types_by_pk(name: String!): event_types

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!

  """An aggregate relationship"""
  events_aggregate(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): events_aggregate!

  """fetch data from the table: "events" using primary key columns"""
  events_by_pk(id: Int!): events

  """
  execute function "fetch_associations" which returns "associations"
  """
  fetch_associations(
    """
    input parameters for function "fetch_associations"
    """
    args: fetch_associations_args!

    """distinct select on columns"""
    distinct_on: [associations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [associations_order_by!]

    """filter the rows returned"""
    where: associations_bool_exp
  ): [associations!]!

  """
  execute function "fetch_associations" and query aggregates on result of table type "associations"
  """
  fetch_associations_aggregate(
    """
    input parameters for function "fetch_associations_aggregate"
    """
    args: fetch_associations_args!

    """distinct select on columns"""
    distinct_on: [associations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [associations_order_by!]

    """filter the rows returned"""
    where: associations_bool_exp
  ): associations_aggregate!

  """
  fetch data from the table: "goals"
  """
  goals(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): [goals!]!

  """
  fetch aggregated fields from the table: "goals"
  """
  goals_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): goals_aggregate!

  """fetch data from the table: "goals" using primary key columns"""
  goals_by_pk(id: Int!): goals

  """
  fetch data from the table: "interactions"
  """
  interactions(
    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): [interactions!]!

  """
  fetch aggregated fields from the table: "interactions"
  """
  interactions_aggregate(
    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): interactions_aggregate!

  """fetch data from the table: "interactions" using primary key columns"""
  interactions_by_pk(id: Int!): interactions

  """An array relationship"""
  locations(
    """distinct select on columns"""
    distinct_on: [locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [locations_order_by!]

    """filter the rows returned"""
    where: locations_bool_exp
  ): [locations!]!

  """An aggregate relationship"""
  locations_aggregate(
    """distinct select on columns"""
    distinct_on: [locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [locations_order_by!]

    """filter the rows returned"""
    where: locations_bool_exp
  ): locations_aggregate!

  """fetch data from the table: "locations" using primary key columns"""
  locations_by_pk(id: Int!): locations

  """
  execute function "match_interactions" which returns "interactions"
  """
  match_interactions(
    """
    input parameters for function "match_interactions"
    """
    args: match_interactions_args!

    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): [interactions!]!

  """
  execute function "match_interactions" and query aggregates on result of table type "interactions"
  """
  match_interactions_aggregate(
    """
    input parameters for function "match_interactions_aggregate"
    """
    args: match_interactions_args!

    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): interactions_aggregate!

  """
  fetch data from the table: "object_types"
  """
  object_types(
    """distinct select on columns"""
    distinct_on: [object_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_types_order_by!]

    """filter the rows returned"""
    where: object_types_bool_exp
  ): [object_types!]!

  """
  fetch aggregated fields from the table: "object_types"
  """
  object_types_aggregate(
    """distinct select on columns"""
    distinct_on: [object_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_types_order_by!]

    """filter the rows returned"""
    where: object_types_bool_exp
  ): object_types_aggregate!

  """fetch data from the table: "object_types" using primary key columns"""
  object_types_by_pk(id: String!): object_types

  """
  fetch data from the table: "objects"
  """
  objects(
    """distinct select on columns"""
    distinct_on: [objects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [objects_order_by!]

    """filter the rows returned"""
    where: objects_bool_exp
  ): [objects!]!

  """
  fetch aggregated fields from the table: "objects"
  """
  objects_aggregate(
    """distinct select on columns"""
    distinct_on: [objects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [objects_order_by!]

    """filter the rows returned"""
    where: objects_bool_exp
  ): objects_aggregate!

  """fetch data from the table: "objects" using primary key columns"""
  objects_by_pk(id: Int!): objects

  """
  fetch data from the table: "todos"
  """
  todos(
    """distinct select on columns"""
    distinct_on: [todos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todos_order_by!]

    """filter the rows returned"""
    where: todos_bool_exp
  ): [todos!]!

  """
  fetch aggregated fields from the table: "todos"
  """
  todos_aggregate(
    """distinct select on columns"""
    distinct_on: [todos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todos_order_by!]

    """filter the rows returned"""
    where: todos_bool_exp
  ): todos_aggregate!

  """fetch data from the table: "todos" using primary key columns"""
  todos_by_pk(id: Int!): todos

  """
  fetch data from the table: "user_movements"
  """
  user_movements(
    """distinct select on columns"""
    distinct_on: [user_movements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_movements_order_by!]

    """filter the rows returned"""
    where: user_movements_bool_exp
  ): [user_movements!]!

  """
  fetch aggregated fields from the table: "user_movements"
  """
  user_movements_aggregate(
    """distinct select on columns"""
    distinct_on: [user_movements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_movements_order_by!]

    """filter the rows returned"""
    where: user_movements_bool_exp
  ): user_movements_aggregate!

  """fetch data from the table: "user_movements" using primary key columns"""
  user_movements_by_pk(id: Int!): user_movements

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: Int!): users
}

input st_d_within_geography_input {
  distance: Float!
  from: geography!
  use_spheroid: Boolean = true
}

input st_d_within_input {
  distance: Float!
  from: geometry!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "associations"
  """
  associations(
    """distinct select on columns"""
    distinct_on: [associations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [associations_order_by!]

    """filter the rows returned"""
    where: associations_bool_exp
  ): [associations!]!

  """
  fetch aggregated fields from the table: "associations"
  """
  associations_aggregate(
    """distinct select on columns"""
    distinct_on: [associations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [associations_order_by!]

    """filter the rows returned"""
    where: associations_bool_exp
  ): associations_aggregate!

  """fetch data from the table: "associations" using primary key columns"""
  associations_by_pk(id: Int!): associations

  """
  fetch data from the table in a streaming manner: "associations"
  """
  associations_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [associations_stream_cursor_input]!

    """filter the rows returned"""
    where: associations_bool_exp
  ): [associations!]!

  """
  execute function "closest_user_location" which returns "locations"
  """
  closest_user_location(
    """
    input parameters for function "closest_user_location"
    """
    args: closest_user_location_args!

    """distinct select on columns"""
    distinct_on: [locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [locations_order_by!]

    """filter the rows returned"""
    where: locations_bool_exp
  ): [locations!]!

  """
  execute function "closest_user_location" and query aggregates on result of table type "locations"
  """
  closest_user_location_aggregate(
    """
    input parameters for function "closest_user_location_aggregate"
    """
    args: closest_user_location_args!

    """distinct select on columns"""
    distinct_on: [locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [locations_order_by!]

    """filter the rows returned"""
    where: locations_bool_exp
  ): locations_aggregate!

  """
  fetch data from the table: "event_types"
  """
  event_types(
    """distinct select on columns"""
    distinct_on: [event_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_types_order_by!]

    """filter the rows returned"""
    where: event_types_bool_exp
  ): [event_types!]!

  """
  fetch aggregated fields from the table: "event_types"
  """
  event_types_aggregate(
    """distinct select on columns"""
    distinct_on: [event_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [event_types_order_by!]

    """filter the rows returned"""
    where: event_types_bool_exp
  ): event_types_aggregate!

  """fetch data from the table: "event_types" using primary key columns"""
  event_types_by_pk(name: String!): event_types

  """
  fetch data from the table in a streaming manner: "event_types"
  """
  event_types_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [event_types_stream_cursor_input]!

    """filter the rows returned"""
    where: event_types_bool_exp
  ): [event_types!]!

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!

  """An aggregate relationship"""
  events_aggregate(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): events_aggregate!

  """fetch data from the table: "events" using primary key columns"""
  events_by_pk(id: Int!): events

  """
  fetch data from the table in a streaming manner: "events"
  """
  events_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [events_stream_cursor_input]!

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!

  """
  execute function "fetch_associations" which returns "associations"
  """
  fetch_associations(
    """
    input parameters for function "fetch_associations"
    """
    args: fetch_associations_args!

    """distinct select on columns"""
    distinct_on: [associations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [associations_order_by!]

    """filter the rows returned"""
    where: associations_bool_exp
  ): [associations!]!

  """
  execute function "fetch_associations" and query aggregates on result of table type "associations"
  """
  fetch_associations_aggregate(
    """
    input parameters for function "fetch_associations_aggregate"
    """
    args: fetch_associations_args!

    """distinct select on columns"""
    distinct_on: [associations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [associations_order_by!]

    """filter the rows returned"""
    where: associations_bool_exp
  ): associations_aggregate!

  """
  fetch data from the table: "goals"
  """
  goals(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): [goals!]!

  """
  fetch aggregated fields from the table: "goals"
  """
  goals_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): goals_aggregate!

  """fetch data from the table: "goals" using primary key columns"""
  goals_by_pk(id: Int!): goals

  """
  fetch data from the table in a streaming manner: "goals"
  """
  goals_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [goals_stream_cursor_input]!

    """filter the rows returned"""
    where: goals_bool_exp
  ): [goals!]!

  """
  fetch data from the table: "interactions"
  """
  interactions(
    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): [interactions!]!

  """
  fetch aggregated fields from the table: "interactions"
  """
  interactions_aggregate(
    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): interactions_aggregate!

  """fetch data from the table: "interactions" using primary key columns"""
  interactions_by_pk(id: Int!): interactions

  """
  fetch data from the table in a streaming manner: "interactions"
  """
  interactions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [interactions_stream_cursor_input]!

    """filter the rows returned"""
    where: interactions_bool_exp
  ): [interactions!]!

  """An array relationship"""
  locations(
    """distinct select on columns"""
    distinct_on: [locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [locations_order_by!]

    """filter the rows returned"""
    where: locations_bool_exp
  ): [locations!]!

  """An aggregate relationship"""
  locations_aggregate(
    """distinct select on columns"""
    distinct_on: [locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [locations_order_by!]

    """filter the rows returned"""
    where: locations_bool_exp
  ): locations_aggregate!

  """fetch data from the table: "locations" using primary key columns"""
  locations_by_pk(id: Int!): locations

  """
  fetch data from the table in a streaming manner: "locations"
  """
  locations_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [locations_stream_cursor_input]!

    """filter the rows returned"""
    where: locations_bool_exp
  ): [locations!]!

  """
  execute function "match_interactions" which returns "interactions"
  """
  match_interactions(
    """
    input parameters for function "match_interactions"
    """
    args: match_interactions_args!

    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): [interactions!]!

  """
  execute function "match_interactions" and query aggregates on result of table type "interactions"
  """
  match_interactions_aggregate(
    """
    input parameters for function "match_interactions_aggregate"
    """
    args: match_interactions_args!

    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): interactions_aggregate!

  """
  fetch data from the table: "object_types"
  """
  object_types(
    """distinct select on columns"""
    distinct_on: [object_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_types_order_by!]

    """filter the rows returned"""
    where: object_types_bool_exp
  ): [object_types!]!

  """
  fetch aggregated fields from the table: "object_types"
  """
  object_types_aggregate(
    """distinct select on columns"""
    distinct_on: [object_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [object_types_order_by!]

    """filter the rows returned"""
    where: object_types_bool_exp
  ): object_types_aggregate!

  """fetch data from the table: "object_types" using primary key columns"""
  object_types_by_pk(id: String!): object_types

  """
  fetch data from the table in a streaming manner: "object_types"
  """
  object_types_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [object_types_stream_cursor_input]!

    """filter the rows returned"""
    where: object_types_bool_exp
  ): [object_types!]!

  """
  fetch data from the table: "objects"
  """
  objects(
    """distinct select on columns"""
    distinct_on: [objects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [objects_order_by!]

    """filter the rows returned"""
    where: objects_bool_exp
  ): [objects!]!

  """
  fetch aggregated fields from the table: "objects"
  """
  objects_aggregate(
    """distinct select on columns"""
    distinct_on: [objects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [objects_order_by!]

    """filter the rows returned"""
    where: objects_bool_exp
  ): objects_aggregate!

  """fetch data from the table: "objects" using primary key columns"""
  objects_by_pk(id: Int!): objects

  """
  fetch data from the table in a streaming manner: "objects"
  """
  objects_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [objects_stream_cursor_input]!

    """filter the rows returned"""
    where: objects_bool_exp
  ): [objects!]!

  """
  fetch data from the table: "todos"
  """
  todos(
    """distinct select on columns"""
    distinct_on: [todos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todos_order_by!]

    """filter the rows returned"""
    where: todos_bool_exp
  ): [todos!]!

  """
  fetch aggregated fields from the table: "todos"
  """
  todos_aggregate(
    """distinct select on columns"""
    distinct_on: [todos_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todos_order_by!]

    """filter the rows returned"""
    where: todos_bool_exp
  ): todos_aggregate!

  """fetch data from the table: "todos" using primary key columns"""
  todos_by_pk(id: Int!): todos

  """
  fetch data from the table in a streaming manner: "todos"
  """
  todos_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [todos_stream_cursor_input]!

    """filter the rows returned"""
    where: todos_bool_exp
  ): [todos!]!

  """
  fetch data from the table: "user_movements"
  """
  user_movements(
    """distinct select on columns"""
    distinct_on: [user_movements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_movements_order_by!]

    """filter the rows returned"""
    where: user_movements_bool_exp
  ): [user_movements!]!

  """
  fetch aggregated fields from the table: "user_movements"
  """
  user_movements_aggregate(
    """distinct select on columns"""
    distinct_on: [user_movements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_movements_order_by!]

    """filter the rows returned"""
    where: user_movements_bool_exp
  ): user_movements_aggregate!

  """fetch data from the table: "user_movements" using primary key columns"""
  user_movements_by_pk(id: Int!): user_movements

  """
  fetch data from the table in a streaming manner: "user_movements"
  """
  user_movements_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_movements_stream_cursor_input]!

    """filter the rows returned"""
    where: user_movements_bool_exp
  ): [user_movements!]!

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: Int!): users

  """
  fetch data from the table in a streaming manner: "users"
  """
  users_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [users_stream_cursor_input]!

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "todos"
"""
type todos {
  current_count: Int
  done_as_expected: Boolean
  due: timestamptz!

  """An object relationship"""
  goal: goals
  goal_id: Int
  id: Int!
  name: String!
  status: String!
  updated: timestamptz!

  """An object relationship"""
  user: users!
  user_id: Int!
}

"""
aggregated selection of "todos"
"""
type todos_aggregate {
  aggregate: todos_aggregate_fields
  nodes: [todos!]!
}

"""
aggregate fields of "todos"
"""
type todos_aggregate_fields {
  avg: todos_avg_fields
  count(columns: [todos_select_column!], distinct: Boolean): Int!
  max: todos_max_fields
  min: todos_min_fields
  stddev: todos_stddev_fields
  stddev_pop: todos_stddev_pop_fields
  stddev_samp: todos_stddev_samp_fields
  sum: todos_sum_fields
  var_pop: todos_var_pop_fields
  var_samp: todos_var_samp_fields
  variance: todos_variance_fields
}

"""aggregate avg on columns"""
type todos_avg_fields {
  current_count: Float
  goal_id: Float
  id: Float
  user_id: Float
}

"""
Boolean expression to filter rows from the table "todos". All fields are combined with a logical 'AND'.
"""
input todos_bool_exp {
  _and: [todos_bool_exp!]
  _not: todos_bool_exp
  _or: [todos_bool_exp!]
  current_count: Int_comparison_exp
  done_as_expected: Boolean_comparison_exp
  due: timestamptz_comparison_exp
  goal: goals_bool_exp
  goal_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  status: String_comparison_exp
  updated: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "todos"
"""
enum todos_constraint {
  """
  unique or primary key constraint on columns "user_id", "goal_id"
  """
  todo_goal_id_user_id_key

  """
  unique or primary key constraint on columns "id"
  """
  todo_pkey
}

"""
input type for incrementing numeric columns in table "todos"
"""
input todos_inc_input {
  current_count: Int
  goal_id: Int
  id: Int
  user_id: Int
}

"""
input type for inserting data into table "todos"
"""
input todos_insert_input {
  current_count: Int
  done_as_expected: Boolean
  due: timestamptz
  goal: goals_obj_rel_insert_input
  goal_id: Int
  id: Int
  name: String
  status: String
  updated: timestamptz
  user: users_obj_rel_insert_input
  user_id: Int
}

"""aggregate max on columns"""
type todos_max_fields {
  current_count: Int
  due: timestamptz
  goal_id: Int
  id: Int
  name: String
  status: String
  updated: timestamptz
  user_id: Int
}

"""aggregate min on columns"""
type todos_min_fields {
  current_count: Int
  due: timestamptz
  goal_id: Int
  id: Int
  name: String
  status: String
  updated: timestamptz
  user_id: Int
}

"""
response of any mutation on the table "todos"
"""
type todos_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [todos!]!
}

"""
input type for inserting object relation for remote table "todos"
"""
input todos_obj_rel_insert_input {
  data: todos_insert_input!

  """upsert condition"""
  on_conflict: todos_on_conflict
}

"""
on_conflict condition type for table "todos"
"""
input todos_on_conflict {
  constraint: todos_constraint!
  update_columns: [todos_update_column!]! = []
  where: todos_bool_exp
}

"""Ordering options when selecting data from "todos"."""
input todos_order_by {
  current_count: order_by
  done_as_expected: order_by
  due: order_by
  goal: goals_order_by
  goal_id: order_by
  id: order_by
  name: order_by
  status: order_by
  updated: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: todos"""
input todos_pk_columns_input {
  id: Int!
}

"""
select columns of table "todos"
"""
enum todos_select_column {
  """column name"""
  current_count

  """column name"""
  done_as_expected

  """column name"""
  due

  """column name"""
  goal_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  status

  """column name"""
  updated

  """column name"""
  user_id
}

"""
input type for updating data in table "todos"
"""
input todos_set_input {
  current_count: Int
  done_as_expected: Boolean
  due: timestamptz
  goal_id: Int
  id: Int
  name: String
  status: String
  updated: timestamptz
  user_id: Int
}

"""aggregate stddev on columns"""
type todos_stddev_fields {
  current_count: Float
  goal_id: Float
  id: Float
  user_id: Float
}

"""aggregate stddev_pop on columns"""
type todos_stddev_pop_fields {
  current_count: Float
  goal_id: Float
  id: Float
  user_id: Float
}

"""aggregate stddev_samp on columns"""
type todos_stddev_samp_fields {
  current_count: Float
  goal_id: Float
  id: Float
  user_id: Float
}

"""
Streaming cursor of the table "todos"
"""
input todos_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: todos_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input todos_stream_cursor_value_input {
  current_count: Int
  done_as_expected: Boolean
  due: timestamptz
  goal_id: Int
  id: Int
  name: String
  status: String
  updated: timestamptz
  user_id: Int
}

"""aggregate sum on columns"""
type todos_sum_fields {
  current_count: Int
  goal_id: Int
  id: Int
  user_id: Int
}

"""
update columns of table "todos"
"""
enum todos_update_column {
  """column name"""
  current_count

  """column name"""
  done_as_expected

  """column name"""
  due

  """column name"""
  goal_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  status

  """column name"""
  updated

  """column name"""
  user_id
}

input todos_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: todos_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: todos_set_input

  """filter the rows which have to be updated"""
  where: todos_bool_exp!
}

"""aggregate var_pop on columns"""
type todos_var_pop_fields {
  current_count: Float
  goal_id: Float
  id: Float
  user_id: Float
}

"""aggregate var_samp on columns"""
type todos_var_samp_fields {
  current_count: Float
  goal_id: Float
  id: Float
  user_id: Float
}

"""aggregate variance on columns"""
type todos_variance_fields {
  current_count: Float
  goal_id: Float
  id: Float
  user_id: Float
}

"""
columns and relationships of "user_movements"
"""
type user_movements {
  date: timestamptz!
  id: Int!
  movements: [jsonb!]
  moves(
    """JSON select path"""
    path: String
  ): jsonb!
  user_id: Int!
}

"""
aggregated selection of "user_movements"
"""
type user_movements_aggregate {
  aggregate: user_movements_aggregate_fields
  nodes: [user_movements!]!
}

"""
aggregate fields of "user_movements"
"""
type user_movements_aggregate_fields {
  avg: user_movements_avg_fields
  count(columns: [user_movements_select_column!], distinct: Boolean): Int!
  max: user_movements_max_fields
  min: user_movements_min_fields
  stddev: user_movements_stddev_fields
  stddev_pop: user_movements_stddev_pop_fields
  stddev_samp: user_movements_stddev_samp_fields
  sum: user_movements_sum_fields
  var_pop: user_movements_var_pop_fields
  var_samp: user_movements_var_samp_fields
  variance: user_movements_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input user_movements_append_input {
  moves: jsonb
}

"""aggregate avg on columns"""
type user_movements_avg_fields {
  id: Float
  user_id: Float
}

"""
Boolean expression to filter rows from the table "user_movements". All fields are combined with a logical 'AND'.
"""
input user_movements_bool_exp {
  _and: [user_movements_bool_exp!]
  _not: user_movements_bool_exp
  _or: [user_movements_bool_exp!]
  date: timestamptz_comparison_exp
  id: Int_comparison_exp
  movements: jsonb_array_comparison_exp
  moves: jsonb_comparison_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "user_movements"
"""
enum user_movements_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_movements_pkey

  """
  unique or primary key constraint on columns "user_id", "date"
  """
  user_movements_user_id_date_key
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input user_movements_delete_at_path_input {
  moves: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input user_movements_delete_elem_input {
  moves: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input user_movements_delete_key_input {
  moves: String
}

"""
input type for incrementing numeric columns in table "user_movements"
"""
input user_movements_inc_input {
  id: Int
  user_id: Int
}

"""
input type for inserting data into table "user_movements"
"""
input user_movements_insert_input {
  date: timestamptz
  id: Int
  movements: [jsonb!]
  moves: jsonb
  user_id: Int
}

"""aggregate max on columns"""
type user_movements_max_fields {
  date: timestamptz
  id: Int
  movements: [jsonb!]
  user_id: Int
}

"""aggregate min on columns"""
type user_movements_min_fields {
  date: timestamptz
  id: Int
  movements: [jsonb!]
  user_id: Int
}

"""
response of any mutation on the table "user_movements"
"""
type user_movements_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user_movements!]!
}

"""
on_conflict condition type for table "user_movements"
"""
input user_movements_on_conflict {
  constraint: user_movements_constraint!
  update_columns: [user_movements_update_column!]! = []
  where: user_movements_bool_exp
}

"""Ordering options when selecting data from "user_movements"."""
input user_movements_order_by {
  date: order_by
  id: order_by
  movements: order_by
  moves: order_by
  user_id: order_by
}

"""primary key columns input for table: user_movements"""
input user_movements_pk_columns_input {
  id: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input user_movements_prepend_input {
  moves: jsonb
}

"""
select columns of table "user_movements"
"""
enum user_movements_select_column {
  """column name"""
  date

  """column name"""
  id

  """column name"""
  movements

  """column name"""
  moves

  """column name"""
  user_id
}

"""
input type for updating data in table "user_movements"
"""
input user_movements_set_input {
  date: timestamptz
  id: Int
  movements: [jsonb!]
  moves: jsonb
  user_id: Int
}

"""aggregate stddev on columns"""
type user_movements_stddev_fields {
  id: Float
  user_id: Float
}

"""aggregate stddev_pop on columns"""
type user_movements_stddev_pop_fields {
  id: Float
  user_id: Float
}

"""aggregate stddev_samp on columns"""
type user_movements_stddev_samp_fields {
  id: Float
  user_id: Float
}

"""
Streaming cursor of the table "user_movements"
"""
input user_movements_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_movements_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_movements_stream_cursor_value_input {
  date: timestamptz
  id: Int
  movements: [jsonb!]
  moves: jsonb
  user_id: Int
}

"""aggregate sum on columns"""
type user_movements_sum_fields {
  id: Int
  user_id: Int
}

"""
update columns of table "user_movements"
"""
enum user_movements_update_column {
  """column name"""
  date

  """column name"""
  id

  """column name"""
  movements

  """column name"""
  moves

  """column name"""
  user_id
}

input user_movements_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: user_movements_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: user_movements_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _delete_elem: user_movements_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: user_movements_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: user_movements_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: user_movements_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: user_movements_set_input

  """filter the rows which have to be updated"""
  where: user_movements_bool_exp!
}

"""aggregate var_pop on columns"""
type user_movements_var_pop_fields {
  id: Float
  user_id: Float
}

"""aggregate var_samp on columns"""
type user_movements_var_samp_fields {
  id: Float
  user_id: Float
}

"""aggregate variance on columns"""
type user_movements_variance_fields {
  id: Float
  user_id: Float
}

"""
columns and relationships of "users"
"""
type users {
  apple_id: String

  """
  A computed field, executes function "closest_user_location"
  """
  closest_user_location(
    """
    input parameters for computed field "closest_user_location" defined on table "users"
    """
    args: closest_user_location_users_args!

    """distinct select on columns"""
    distinct_on: [locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [locations_order_by!]

    """filter the rows returned"""
    where: locations_bool_exp
  ): [locations!]
  config(
    """JSON select path"""
    path: String
  ): jsonb!

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!

  """An aggregate relationship"""
  events_aggregate(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): events_aggregate!
  id: Int!
  language: String!

  """An array relationship"""
  locations(
    """distinct select on columns"""
    distinct_on: [locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [locations_order_by!]

    """filter the rows returned"""
    where: locations_bool_exp
  ): [locations!]!

  """An aggregate relationship"""
  locations_aggregate(
    """distinct select on columns"""
    distinct_on: [locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [locations_order_by!]

    """filter the rows returned"""
    where: locations_bool_exp
  ): locations_aggregate!
  name: String!
  timezone: String
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input users_append_input {
  config: jsonb
}

"""aggregate avg on columns"""
type users_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  apple_id: String_comparison_exp
  config: jsonb_comparison_exp
  events: events_bool_exp
  events_aggregate: events_aggregate_bool_exp
  id: Int_comparison_exp
  language: String_comparison_exp
  locations: locations_bool_exp
  locations_aggregate: locations_aggregate_bool_exp
  name: String_comparison_exp
  timezone: String_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input users_delete_at_path_input {
  config: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input users_delete_elem_input {
  config: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input users_delete_key_input {
  config: String
}

"""
input type for incrementing numeric columns in table "users"
"""
input users_inc_input {
  id: Int
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  apple_id: String
  config: jsonb
  events: events_arr_rel_insert_input
  id: Int
  language: String
  locations: locations_arr_rel_insert_input
  name: String
  timezone: String
}

"""aggregate max on columns"""
type users_max_fields {
  apple_id: String
  id: Int
  language: String
  name: String
  timezone: String
}

"""aggregate min on columns"""
type users_min_fields {
  apple_id: String
  id: Int
  language: String
  name: String
  timezone: String
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """upsert condition"""
  on_conflict: users_on_conflict
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  apple_id: order_by
  config: order_by
  events_aggregate: events_aggregate_order_by
  id: order_by
  language: order_by
  locations_aggregate: locations_aggregate_order_by
  name: order_by
  timezone: order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input users_prepend_input {
  config: jsonb
}

scalar users_scalar

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  apple_id

  """column name"""
  config

  """column name"""
  id

  """column name"""
  language

  """column name"""
  name

  """column name"""
  timezone
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  apple_id: String
  config: jsonb
  id: Int
  language: String
  name: String
  timezone: String
}

"""aggregate stddev on columns"""
type users_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type users_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type users_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: users_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input users_stream_cursor_value_input {
  apple_id: String
  config: jsonb
  id: Int
  language: String
  name: String
  timezone: String
}

"""aggregate sum on columns"""
type users_sum_fields {
  id: Int
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  apple_id

  """column name"""
  config

  """column name"""
  id

  """column name"""
  language

  """column name"""
  name

  """column name"""
  timezone
}

input users_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: users_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: users_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _delete_elem: users_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: users_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: users_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: users_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: users_set_input

  """filter the rows which have to be updated"""
  where: users_bool_exp!
}

"""aggregate var_pop on columns"""
type users_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type users_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type users_variance_fields {
  id: Float
}

scalar vector

"""
Boolean expression to compare columns of type "vector". All fields are combined with logical 'AND'.
"""
input vector_comparison_exp {
  _eq: vector
  _gt: vector
  _gte: vector
  _in: [vector!]
  _is_null: Boolean
  _lt: vector
  _lte: vector
  _neq: vector
  _nin: [vector!]
}
