schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar float8

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "interactions"
"""
type interactions {
  content: String!
  content_type: String
  embedding: vector!
  id: Int!
  user_id: Int!
}

"""
aggregated selection of "interactions"
"""
type interactions_aggregate {
  aggregate: interactions_aggregate_fields
  nodes: [interactions!]!
}

"""
aggregate fields of "interactions"
"""
type interactions_aggregate_fields {
  avg: interactions_avg_fields
  count(columns: [interactions_select_column!], distinct: Boolean): Int!
  max: interactions_max_fields
  min: interactions_min_fields
  stddev: interactions_stddev_fields
  stddev_pop: interactions_stddev_pop_fields
  stddev_samp: interactions_stddev_samp_fields
  sum: interactions_sum_fields
  var_pop: interactions_var_pop_fields
  var_samp: interactions_var_samp_fields
  variance: interactions_variance_fields
}

"""aggregate avg on columns"""
type interactions_avg_fields {
  id: Float
  user_id: Float
}

"""
Boolean expression to filter rows from the table "interactions". All fields are combined with a logical 'AND'.
"""
input interactions_bool_exp {
  _and: [interactions_bool_exp!]
  _not: interactions_bool_exp
  _or: [interactions_bool_exp!]
  content: String_comparison_exp
  content_type: String_comparison_exp
  embedding: vector_comparison_exp
  id: Int_comparison_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "interactions"
"""
enum interactions_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  interactions_pkey
}

"""
input type for incrementing numeric columns in table "interactions"
"""
input interactions_inc_input {
  id: Int
  user_id: Int
}

"""
input type for inserting data into table "interactions"
"""
input interactions_insert_input {
  content: String
  content_type: String
  embedding: vector
  id: Int
  user_id: Int
}

"""aggregate max on columns"""
type interactions_max_fields {
  content: String
  content_type: String
  id: Int
  user_id: Int
}

"""aggregate min on columns"""
type interactions_min_fields {
  content: String
  content_type: String
  id: Int
  user_id: Int
}

"""
response of any mutation on the table "interactions"
"""
type interactions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [interactions!]!
}

"""
on_conflict condition type for table "interactions"
"""
input interactions_on_conflict {
  constraint: interactions_constraint!
  update_columns: [interactions_update_column!]! = []
  where: interactions_bool_exp
}

"""Ordering options when selecting data from "interactions"."""
input interactions_order_by {
  content: order_by
  content_type: order_by
  embedding: order_by
  id: order_by
  user_id: order_by
}

"""primary key columns input for table: interactions"""
input interactions_pk_columns_input {
  id: Int!
}

"""
select columns of table "interactions"
"""
enum interactions_select_column {
  """column name"""
  content

  """column name"""
  content_type

  """column name"""
  embedding

  """column name"""
  id

  """column name"""
  user_id
}

"""
input type for updating data in table "interactions"
"""
input interactions_set_input {
  content: String
  content_type: String
  embedding: vector
  id: Int
  user_id: Int
}

"""aggregate stddev on columns"""
type interactions_stddev_fields {
  id: Float
  user_id: Float
}

"""aggregate stddev_pop on columns"""
type interactions_stddev_pop_fields {
  id: Float
  user_id: Float
}

"""aggregate stddev_samp on columns"""
type interactions_stddev_samp_fields {
  id: Float
  user_id: Float
}

"""
Streaming cursor of the table "interactions"
"""
input interactions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: interactions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input interactions_stream_cursor_value_input {
  content: String
  content_type: String
  embedding: vector
  id: Int
  user_id: Int
}

"""aggregate sum on columns"""
type interactions_sum_fields {
  id: Int
  user_id: Int
}

"""
update columns of table "interactions"
"""
enum interactions_update_column {
  """column name"""
  content

  """column name"""
  content_type

  """column name"""
  embedding

  """column name"""
  id

  """column name"""
  user_id
}

input interactions_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: interactions_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: interactions_set_input

  """filter the rows which have to be updated"""
  where: interactions_bool_exp!
}

"""aggregate var_pop on columns"""
type interactions_var_pop_fields {
  id: Float
  user_id: Float
}

"""aggregate var_samp on columns"""
type interactions_var_samp_fields {
  id: Float
  user_id: Float
}

"""aggregate variance on columns"""
type interactions_variance_fields {
  id: Float
  user_id: Float
}

input match_interactions_args {
  match_threshold: float8
  query_embedding: vector
  target_user_id: Int
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "interactions"
  """
  delete_interactions(
    """filter the rows which have to be deleted"""
    where: interactions_bool_exp!
  ): interactions_mutation_response

  """
  delete single row from the table: "interactions"
  """
  delete_interactions_by_pk(id: Int!): interactions

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(id: Int!): user

  """
  insert data into the table: "interactions"
  """
  insert_interactions(
    """the rows to be inserted"""
    objects: [interactions_insert_input!]!

    """upsert condition"""
    on_conflict: interactions_on_conflict
  ): interactions_mutation_response

  """
  insert a single row into the table: "interactions"
  """
  insert_interactions_one(
    """the row to be inserted"""
    object: interactions_insert_input!

    """upsert condition"""
    on_conflict: interactions_on_conflict
  ): interactions

  """
  insert data into the table: "user"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user

  """
  update data of the table: "interactions"
  """
  update_interactions(
    """increments the numeric columns with given value of the filtered values"""
    _inc: interactions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: interactions_set_input

    """filter the rows which have to be updated"""
    where: interactions_bool_exp!
  ): interactions_mutation_response

  """
  update single row of the table: "interactions"
  """
  update_interactions_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: interactions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: interactions_set_input
    pk_columns: interactions_pk_columns_input!
  ): interactions

  """
  update multiples rows of table: "interactions"
  """
  update_interactions_many(
    """updates to execute, in order"""
    updates: [interactions_updates!]!
  ): [interactions_mutation_response]

  """
  update data of the table: "user"
  """
  update_user(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user

  """
  update multiples rows of table: "user"
  """
  update_user_many(
    """updates to execute, in order"""
    updates: [user_updates!]!
  ): [user_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "interactions"
  """
  interactions(
    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): [interactions!]!

  """
  fetch aggregated fields from the table: "interactions"
  """
  interactions_aggregate(
    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): interactions_aggregate!

  """fetch data from the table: "interactions" using primary key columns"""
  interactions_by_pk(id: Int!): interactions

  """
  execute function "match_interactions" which returns "interactions"
  """
  match_interactions(
    """
    input parameters for function "match_interactions"
    """
    args: match_interactions_args!

    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): [interactions!]!

  """
  execute function "match_interactions" and query aggregates on result of table type "interactions"
  """
  match_interactions_aggregate(
    """
    input parameters for function "match_interactions_aggregate"
    """
    args: match_interactions_args!

    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): interactions_aggregate!

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: Int!): user
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "interactions"
  """
  interactions(
    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): [interactions!]!

  """
  fetch aggregated fields from the table: "interactions"
  """
  interactions_aggregate(
    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): interactions_aggregate!

  """fetch data from the table: "interactions" using primary key columns"""
  interactions_by_pk(id: Int!): interactions

  """
  fetch data from the table in a streaming manner: "interactions"
  """
  interactions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [interactions_stream_cursor_input]!

    """filter the rows returned"""
    where: interactions_bool_exp
  ): [interactions!]!

  """
  execute function "match_interactions" which returns "interactions"
  """
  match_interactions(
    """
    input parameters for function "match_interactions"
    """
    args: match_interactions_args!

    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): [interactions!]!

  """
  execute function "match_interactions" and query aggregates on result of table type "interactions"
  """
  match_interactions_aggregate(
    """
    input parameters for function "match_interactions_aggregate"
    """
    args: match_interactions_args!

    """distinct select on columns"""
    distinct_on: [interactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [interactions_order_by!]

    """filter the rows returned"""
    where: interactions_bool_exp
  ): interactions_aggregate!

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: Int!): user

  """
  fetch data from the table in a streaming manner: "user"
  """
  user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_stream_cursor_input]!

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!
}

"""
columns and relationships of "user"
"""
type user {
  id: Int!
}

"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  avg: user_avg_fields
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
  stddev: user_stddev_fields
  stddev_pop: user_stddev_pop_fields
  stddev_samp: user_stddev_samp_fields
  sum: user_sum_fields
  var_pop: user_var_pop_fields
  var_samp: user_var_samp_fields
  variance: user_variance_fields
}

"""aggregate avg on columns"""
type user_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  id: Int_comparison_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_pkey
}

"""
input type for incrementing numeric columns in table "user"
"""
input user_inc_input {
  id: Int
}

"""
input type for inserting data into table "user"
"""
input user_insert_input {
  id: Int
}

"""aggregate max on columns"""
type user_max_fields {
  id: Int
}

"""aggregate min on columns"""
type user_min_fields {
  id: Int
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
on_conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  id: order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  id: Int!
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  id
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  id: Int
}

"""aggregate stddev on columns"""
type user_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type user_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type user_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "user"
"""
input user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_stream_cursor_value_input {
  id: Int
}

"""aggregate sum on columns"""
type user_sum_fields {
  id: Int
}

"""
update columns of table "user"
"""
enum user_update_column {
  """column name"""
  id
}

input user_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: user_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: user_set_input

  """filter the rows which have to be updated"""
  where: user_bool_exp!
}

"""aggregate var_pop on columns"""
type user_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type user_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type user_variance_fields {
  id: Float
}

scalar vector

"""
Boolean expression to compare columns of type "vector". All fields are combined with logical 'AND'.
"""
input vector_comparison_exp {
  _eq: vector
  _gt: vector
  _gte: vector
  _in: [vector!]
  _is_null: Boolean
  _lt: vector
  _lte: vector
  _neq: vector
  _nin: [vector!]
}
